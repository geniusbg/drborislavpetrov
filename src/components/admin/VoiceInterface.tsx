/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { useState, useEffect, useRef, useCallback } from 'react'
import { Mic, MicOff, Volume2, Smartphone, Command, X, Check, AlertCircle } from 'lucide-react'
import { getBulgariaTime } from '@/lib/bulgaria-time'

interface VoiceInterfaceProps {
  onCommand: (command: string) => void
  onClose?: () => void
}

interface VoiceState {
  isListening: boolean
  isSupported: boolean
  transcript: string
  error: string
  isMobile: boolean
}

interface ParsedCommand {
  action: string
  entity?: string
  name?: string
  phone?: string
  email?: string
  date?: string
  time?: string
  service?: string
  originalCommand: string
}

const VoiceInterface: React.FC<VoiceInterfaceProps> = ({ onCommand, onClose }) => {
  const [voiceState, setVoiceState] = useState<VoiceState>({
    isListening: false,
    isSupported: false,
    transcript: '',
    error: '',
    isMobile: false
  })
  
  const [showSmartInterface, setShowSmartInterface] = useState(false)
  const [isProcessing, setIsProcessing] = useState(false)
  const [success, setSuccess] = useState('')
  
  const recognitionRef = useRef<any>(null)
  const inputRef = useRef<HTMLTextAreaElement>(null)
  const timeoutRef = useRef<NodeJS.Timeout | null>(null)

  // Detect device and browser support
  useEffect(() => {
    const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
    const isIOS = /iPhone|iPad|iPod/i.test(navigator.userAgent)
    
    // Check Web Speech API support
    const SpeechRecognition = window.SpeechRecognition || (window as any).webkitSpeechRecognition
    const isSupported = !!SpeechRecognition && !isIOS // iOS Safari doesn't support Web Speech API
    
    setVoiceState(prev => ({
      ...prev,
      isSupported,
      isMobile
    }))

    // Initialize speech recognition
    if (SpeechRecognition && !isIOS) {
      recognitionRef.current = new SpeechRecognition()
      recognitionRef.current.continuous = true
      recognitionRef.current.interimResults = true
      recognitionRef.current.lang = 'bg-BG'
      recognitionRef.current.maxAlternatives = 1
      
      // –£–≤–µ–ª–∏—á–∞–≤–∞–º–µ timeout-–∞ –∑–∞ –ø–æ-–¥—ä–ª–≥–æ —Å–ª—É—à–∞–Ω–µ
      recognitionRef.current.continuous = true
      
      recognitionRef.current.onstart = () => {
        console.log('üé§ Voice recognition started')
        setVoiceState(prev => ({ ...prev, isListening: true, error: '' }))
      }
      
      recognitionRef.current.onresult = (event: any) => {
        let finalTranscript = ''
        let interimTranscript = ''
        
        for (let i = event.resultIndex; i < event.results.length; i++) {
          const transcript = event.results[i][0].transcript
          if (event.results[i].isFinal) {
            finalTranscript += transcript
          } else {
            interimTranscript += transcript
          }
        }
        
        // Clean up the transcript for display - replace klyomba with @ symbol
        const cleanedTranscript = cleanTranscript(finalTranscript + interimTranscript)
        
        console.log('üé§ Voice transcript:', cleanedTranscript)
        setVoiceState(prev => ({
          ...prev,
          transcript: cleanedTranscript
        }))
      }
      
      recognitionRef.current.onerror = (event: any) => {
        console.error('üé§ Speech recognition error:', event.error)
        setVoiceState(prev => ({
          ...prev,
          isListening: false,
          error: `–ì—Ä–µ—à–∫–∞: ${event.error}`
        }))
      }
      
      recognitionRef.current.onend = () => {
        console.log('üé§ Voice recognition ended')
        setVoiceState(prev => ({ ...prev, isListening: false }))
      }
    }
  }, [])

  // Parse voice command function
  const parseVoiceCommand = (command: string): ParsedCommand => {
    console.log('üé§ === PARSING VOICE COMMAND ===')
    console.log('üìù Input command:', command)
    
    // Completely rewritten patterns based on virtual team consultation
    // @virtual-skeptic: Previous regex was too restrictive with [^0-9]+?
    // @virtual-performance-optimizer: Using positive lookahead for better performance
    const patterns = {
      // User management - improved patterns with better name extraction
      addUser: /(?:–¥–æ–±–∞–≤–∏|—Å—ä–∑–¥–∞–π|–Ω–∞–ø—Ä–∞–≤–∏)\s+(?:–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª|–∫–ª–∏–µ–Ω—Ç|–ø–∞—Ü–∏–µ–Ω—Ç)\s+([–∞-—è]+(?:\s+[–∞-—è]+)*?)(?=\s+(?:—Ç–µ–ª–µ—Ñ–æ–Ω|—Ç–µ–ª|–Ω–æ–º–µ—Ä|–∏–º–µ–π–ª|email)|$)/i,
      updateUser: /(?:–ø—Ä–æ–º–µ–Ω–∏|—Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–π|–∏–∑–º–µ–Ω–∏)\s+(?:–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª|–∫–ª–∏–µ–Ω—Ç|–ø–∞—Ü–∏–µ–Ω—Ç)\s+([–∞-—è]+(?:\s+[–∞-—è]+)*?)(?=\s+(?:—Ç–µ–ª–µ—Ñ–æ–Ω|—Ç–µ–ª|–Ω–æ–º–µ—Ä|–∏–º–µ–π–ª|email)|$)/i,
      deleteUser: /(?:–∏–∑—Ç—Ä–∏–π|–ø—Ä–µ–º–∞—Ö–Ω–∏|—É–¥–∞–ª–∏)\s+(?:–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª|–∫–ª–∏–µ–Ω—Ç|–ø–∞—Ü–∏–µ–Ω—Ç)\s+([–∞-—è]+(?:\s+[–∞-—è]+)*)/i,
      
      // Booking management - improved patterns
      addBooking: /(?:–¥–æ–±–∞–≤–∏|—Å—ä–∑–¥–∞–π|–Ω–∞–ø—Ä–∞–≤–∏|–∑–∞–ø–∏—à–∏|–∑–∞–ø–∞–∑–∏)\s+(?:—Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è|–∑–∞–ø–∏—Å|—á–∞—Å)(?:\s+–∑–∞\s+|\s+–Ω–∞\s+|\s+)([^0-9]+?)(?=\s+(?:–¥–∞—Ç–∞|–¥–µ–Ω|—á–∞—Å|–≤—Ä–µ–º–µ|—É—Å–ª—É–≥–∞|–ª–µ—á–µ–Ω–∏–µ|\d|–Ω–∞|–∑–∞|–æ—Ç)|$)/i,
      updateBooking: /(?:–ø—Ä–æ–º–µ–Ω–∏|—Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–π|–∏–∑–º–µ–Ω–∏)\s+(?:—Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è|–∑–∞–ø–∏—Å|—á–∞—Å)\s+([^0-9]+?)(?=\s+(?:–¥–∞—Ç–∞|–¥–µ–Ω|—á–∞—Å|–≤—Ä–µ–º–µ|\d)|$)/i,
      cancelBooking: /(?:–æ—Ç–º–µ–Ω–∏|–æ—Ç–∫–∞–∂–∏|–ø—Ä–µ–∫—Ä–∞—Ç–∏)\s+(?:—Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è|–∑–∞–ø–∏—Å|—á–∞—Å)\s+([^0-9]+?)(?=\s+(?:–¥–∞—Ç–∞|–¥–µ–Ω|\d)|$)/i,
      deleteBooking: /(?:–∏–∑—Ç—Ä–∏–π|–ø—Ä–µ–º–∞—Ö–Ω–∏|—É–¥–∞–ª–∏)\s+(?:—Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è|–∑–∞–ø–∏—Å|—á–∞—Å)\s+([^0-9]+?)(?=\s+(?:–¥–∞—Ç–∞|–¥–µ–Ω|\d)|$)/i,
      
      // Utility commands
      checkAvailability: /(?:–ø—Ä–æ–≤–µ—Ä–∏|–ø–æ–∫–∞–∂–∏)\s+(?:—Å–≤–æ–±–æ–¥–Ω–∏\s+)?(?:—á–∞—Å–æ–≤–µ|—Å–ª–æ—Ç–æ–≤–µ)(?:\s+–∑–∞\s+([^\s]+))?/i,
      showBookings: /(?:–ø–æ–∫–∞–∂–∏|—Å–ø–∏—Å—ä–∫|—Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏)\s+(?:—Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏|–∑–∞–ø–∏—Å–∏|—á–∞—Å–æ–≤–µ)\s+–∑–∞\s+([^\s]+)/i,
    }

    // Check each pattern
    for (const [action, pattern] of Object.entries(patterns)) {
      const match = command.match(pattern)
      if (match) {
        console.log('‚úÖ Pattern matched:', action)
        console.log('üìã Match groups:', match)
        
        const result: ParsedCommand = {
          action: action,
          originalCommand: command
        }

        // Extract parameters based on action
        switch (action) {
          case 'addUser':
          case 'updateUser':
            // @virtual-skeptic: Simplified name extraction using positive lookahead
            result.name = match[1]?.trim() || ''
            
            // Extract phone and email using improved patterns
            const phoneMatch = command.match(/(?:—Ç–µ–ª–µ—Ñ–æ–Ω|—Ç–µ–ª|–Ω–æ–º–µ—Ä)\s+([0-9\s\+\-\(\)]+)/i)
            const emailMatch = command.match(/(?:–∏–º–µ–π–ª|email)\s+([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/i)
            let email = emailMatch?.[1]?.trim()
            let phone = phoneMatch?.[1]?.trim()
            
            // Clean phone number - remove all spaces and special characters except digits
            if (phone) {
              phone = phone.replace(/\s+/g, '').replace(/[^0-9]/g, '')
            }

            // –ê–∫–æ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω email –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ç—ä—Ä—Å–∏ –Ω–∞ –∫–∏—Ä–∏–ª–∏—Ü–∞ –∏ —Å–≥–ª–æ–±–∏
            if (!email) {
              // –¢—ä—Ä—Å–∏ "–∏–º–µ–π–ª <–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª> –∫–ª—å–æ–º–±–∞ <–¥–æ–º–µ–π–Ω> —Ç–æ—á–∫–∞ <—Ä–∞–∑—à–∏—Ä–µ–Ω–∏–µ>"
              const emailPartsMatch = command.match(/(?:–∏–º–µ–π–ª|email)\s+([–∞-—èa-zA-Z0-9._%+-]+)\s+(?:–∫–ª—å–æ–º–±–∞|klyomba|@)\s+([–∞-—èa-zA-Z0-9._%+-]+)\s+(?:—Ç–æ—á–∫–∞|dot|\.)\s*([–∞-—èa-zA-Z]{2,})/i)
              if (emailPartsMatch) {
                let username = emailPartsMatch[1]?.trim()
                let domain = emailPartsMatch[2]?.trim()
                let tld = emailPartsMatch[3]?.trim()
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–π –∫–∏—Ä–∏–ª–∏—Ü–∞ –∫—ä–º –ª–∞—Ç–∏–Ω–∏—Ü–∞
                const bulgarianToLatin: { [key: string]: string } = {
                  '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '–∂': 'zh', '–∑': 'z',
                  '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o', '–ø': 'p',
                  '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch',
                  '—à': 'sh', '—â': 'sht', '—ä': 'a', '—å': 'y', '—é': 'yu', '—è': 'ya',
                  '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–ñ': 'Zh', '–ó': 'Z',
                  '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M', '–ù': 'N', '–û': 'O', '–ü': 'P',
                  '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U', '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch',
                  '–®': 'Sh', '–©': 'Sht', '–™': 'A', '–¨': 'Y', '–Æ': 'Yu', '–Ø': 'Ya'
                }
                const convertToLatin = (text: string): string => {
                  return text.split('').map(char => bulgarianToLatin[char] || char).join('')
                }
                username = convertToLatin(username)
                domain = convertToLatin(domain)
                tld = convertToLatin(tld)
                // –ê–∫–æ tld –µ "–±–≥", –Ω–∞–ø—Ä–∞–≤–∏ –≥–æ "bg"
                if (tld.toLowerCase() === '–±–≥') tld = 'bg'
                email = `${username}@${domain}.${tld}`
              }
            }

                         // –ê–∫–æ –æ—â–µ –Ω—è–º–∞ email, –ø—Ä–æ–±–≤–∞–π –¥–∞ —Å–≥–ª–æ–±–∏—à –æ—Ç "–∏–º–µ–π–ª <–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª> –∫–ª—å–æ–º–±–∞ <–¥–æ–º–µ–π–Ω>"
             if (!email) {
               const emailSimpleMatch = command.match(/(?:–∏–º–µ–π–ª|email)\s+([–∞-—èa-zA-Z0-9._%+-]+)\s+(?:–∫–ª—å–æ–º–±–∞|klyomba|@)\s+([–∞-—èa-zA-Z0-9._%+-]+)/i)
               if (emailSimpleMatch) {
                 let username = emailSimpleMatch[1]?.trim()
                 let domain = emailSimpleMatch[2]?.trim()
                 const bulgarianToLatin: { [key: string]: string } = {
                   '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '–∂': 'zh', '–∑': 'z',
                   '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o', '–ø': 'p',
                   '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch',
                   '—à': 'sh', '—â': 'sht', '—ä': 'a', '—å': 'y', '—é': 'yu', '—è': 'ya',
                   '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–ñ': 'Zh', '–ó': 'Z',
                   '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M', '–ù': 'N', '–û': 'O', '–ü': 'P',
                   '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U', '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch',
                   '–®': 'Sh', '–©': 'Sht', '–™': 'A', '–¨': 'Y', '–Æ': 'Yu', '–Ø': 'Ya'
                 }
                 const convertToLatin = (text: string): string => {
                   return text.split('').map(char => bulgarianToLatin[char] || char).join('')
                 }
                 username = convertToLatin(username)
                 domain = convertToLatin(domain)
                 
                 // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –¥–æ–º–µ–π–Ω—ä—Ç –≤–µ—á–µ —Å—ä–¥—ä—Ä–∂–∞ —Ç–æ—á–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä yahoo.com)
                 if (domain.includes('.')) {
                   email = `${username}@${domain}`
                 } else {
                   email = `${username}@${domain}.bg` // –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ .bg —Å–∞–º–æ –∞–∫–æ –Ω—è–º–∞ —Ç–æ—á–∫–∞
                 }
               }
             }

             // –ê–∫–æ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç, —Ç—ä—Ä—Å–∏ –Ω–∞–≤—Å—è–∫—ä–¥–µ –≤ –∫–æ–º–∞–Ω–¥–∞—Ç–∞
             if (!phone) {
               const phoneAnywhere = command.match(/([0-9]{3,4}\s*[0-9]{2}\s*[0-9]{2})/)
               if (phoneAnywhere) {
                 phone = phoneAnywhere[1]?.trim().replace(/\s+/g, '').replace(/[^0-9]/g, '')
               }
             }

             result.phone = phone
             result.email = email
            break
          case 'deleteUser':
            result.name = match[1]?.trim()
            break
          case 'addBooking':
            result.name = match[1]?.trim()
            
            // Extract other parameters using separate patterns
            const dateMatch = command.match(/(?:–¥–∞—Ç–∞|–¥–µ–Ω)\s+([^\s]+)/i)
            const timeMatch = command.match(/(?:—á–∞—Å|–≤—Ä–µ–º–µ)\s+([^\s]+)/i)
            const serviceMatch = command.match(/(?:—É—Å–ª—É–≥–∞|–ª–µ—á–µ–Ω–∏–µ)\s+([^\s]+)/i)
            
            result.date = dateMatch?.[1]?.trim()
            result.time = timeMatch?.[1]?.trim()
            result.service = serviceMatch?.[1]?.trim()
            
            // –ê–∫–æ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞ –¥–∞—Ç–∞, –ø—Ä–æ–±–≤–∞–π –¥–∞ —è –∏–∑–≤–ª–µ—á–µ—à –æ—Ç —Ä–∞–∑–ª–∏—á–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–∏
            if (!result.date) {
              // –¢—ä—Ä—Å–∏ –¥–∞—Ç–∞ –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç DD.MM –∏–ª–∏ DD.MM.YYYY
              const dateFormatMatch = command.match(/(\d{1,2})\.(\d{1,2})(?:\.(\d{4}))?/)
              if (dateFormatMatch) {
                const day = dateFormatMatch[1]
                const month = dateFormatMatch[2]
                const year = dateFormatMatch[3] || getBulgariaTime().getFullYear()
                result.date = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`
                console.log('üìÖ Extracted date:', result.date)
              }
            }
            
            // –ê–∫–æ –≤—Å–µ –æ—â–µ –Ω—è–º–∞ –¥–∞—Ç–∞, –ø—Ä–æ–±–≤–∞–π –¥–∞ —è –∏–∑–≤–ª–µ—á–µ—à –æ—Ç —Ç–µ–∫—Å—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä "15 –∞–≤–≥—É—Å—Ç 2025")
            if (!result.date) {
              const textDateMatch = command.match(/(\d{1,2})\s+(—è–Ω—É–∞—Ä–∏|—Ñ–µ–≤—Ä—É–∞—Ä–∏|–º–∞—Ä—Ç|–∞–ø—Ä–∏–ª|–º–∞–π|—é–Ω–∏|—é–ª–∏|–∞–≤–≥—É—Å—Ç|—Å–µ–ø—Ç–µ–º–≤—Ä–∏|–æ–∫—Ç–æ–º–≤—Ä–∏|–Ω–æ–µ–º–≤—Ä–∏|–¥–µ–∫–µ–º–≤—Ä–∏)\s+(\d{4})/i)
              if (textDateMatch) {
                const day = textDateMatch[1]
                const monthName = textDateMatch[2].toLowerCase()
                const year = textDateMatch[3]
                
                const monthMap: { [key: string]: string } = {
                  '—è–Ω—É–∞—Ä–∏': '01', '—Ñ–µ–≤—Ä—É–∞—Ä–∏': '02', '–º–∞—Ä—Ç': '03', '–∞–ø—Ä–∏–ª': '04',
                  '–º–∞–π': '05', '—é–Ω–∏': '06', '—é–ª–∏': '07', '–∞–≤–≥—É—Å—Ç': '08',
                  '—Å–µ–ø—Ç–µ–º–≤—Ä–∏': '09', '–æ–∫—Ç–æ–º–≤—Ä–∏': '10', '–Ω–æ–µ–º–≤—Ä–∏': '11', '–¥–µ–∫–µ–º–≤—Ä–∏': '12'
                }
                
                const month = monthMap[monthName]
                if (month) {
                  result.date = `${year}-${month}-${day.padStart(2, '0')}`
                  console.log('üìÖ Extracted text date:', result.date)
                }
              }
            }
            
            // –ê–∫–æ –≤—Å–µ –æ—â–µ –Ω—è–º–∞ –¥–∞—Ç–∞, –ø—Ä–æ–±–≤–∞–π –¥–∞ —è –∏–∑–≤–ª–µ—á–µ—à –æ—Ç —á–∏—Å–ª–æ–≤–∏ —Ñ–æ—Ä–º–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–ø—ä—Ä–≤–∏ –∞–≤–≥—É—Å—Ç 2025")
            if (!result.date) {
              const ordinalDateMatch = command.match(/(–ø—ä—Ä–≤–∏|–≤—Ç–æ—Ä–∏|—Ç—Ä–µ—Ç–∏|—á–µ—Ç–≤—ä—Ä—Ç–∏|–ø–µ—Ç–∏|—à–µ—Å—Ç–∏|—Å–µ–¥–º–∏|–æ—Å–º–∏|–¥–µ–≤–µ—Ç–∏|–¥–µ—Å–µ—Ç–∏|–µ–¥–∏–Ω–∞–¥–µ—Å–µ—Ç–∏|–¥–≤–∞–Ω–∞–¥–µ—Å–µ—Ç–∏|—Ç—Ä–∏–Ω–∞–¥–µ—Å–µ—Ç–∏|—á–µ—Ç–∏—Ä–∏–Ω–∞–¥–µ—Å–µ—Ç–∏|–ø–µ—Ç–Ω–∞–¥–µ—Å–µ—Ç–∏|—à–µ—Å—Ç–Ω–∞–¥–µ—Å–µ—Ç–∏|—Å–µ–¥–µ–º–Ω–∞–¥–µ—Å–µ—Ç–∏|–æ—Å–µ–º–Ω–∞–¥–µ—Å–µ—Ç–∏|–¥–µ–≤–µ—Ç–Ω–∞–¥–µ—Å–µ—Ç–∏|–¥–≤–∞–¥–µ—Å–µ—Ç–∏|–¥–≤–∞–¥–µ—Å–µ—Ç –∏ –ø—ä—Ä–≤–∏|–¥–≤–∞–¥–µ—Å–µ—Ç –∏ –≤—Ç–æ—Ä–∏|–¥–≤–∞–¥–µ—Å–µ—Ç –∏ —Ç—Ä–µ—Ç–∏|–¥–≤–∞–¥–µ—Å–µ—Ç –∏ —á–µ—Ç–≤—ä—Ä—Ç–∏|–¥–≤–∞–¥–µ—Å–µ—Ç –∏ –ø–µ—Ç–∏|–¥–≤–∞–¥–µ—Å–µ—Ç –∏ —à–µ—Å—Ç–∏|–¥–≤–∞–¥–µ—Å–µ—Ç –∏ —Å–µ–¥–º–∏|–¥–≤–∞–¥–µ—Å–µ—Ç –∏ –æ—Å–º–∏|–¥–≤–∞–¥–µ—Å–µ—Ç –∏ –¥–µ–≤–µ—Ç–∏|—Ç—Ä–∏–¥–µ—Å–µ—Ç–∏|—Ç—Ä–∏–¥–µ—Å–µ—Ç –∏ –ø—ä—Ä–≤–∏)\s+(—è–Ω—É–∞—Ä–∏|—Ñ–µ–≤—Ä—É–∞—Ä–∏|–º–∞—Ä—Ç|–∞–ø—Ä–∏–ª|–º–∞–π|—é–Ω–∏|—é–ª–∏|–∞–≤–≥—É—Å—Ç|—Å–µ–ø—Ç–µ–º–≤—Ä–∏|–æ–∫—Ç–æ–º–≤—Ä–∏|–Ω–æ–µ–º–≤—Ä–∏|–¥–µ–∫–µ–º–≤—Ä–∏)\s+(\d{4})(?:\s+–≥–æ–¥–∏–Ω–∞)?/i)
              if (ordinalDateMatch) {
                const dayName = ordinalDateMatch[1].toLowerCase()
                const monthName = ordinalDateMatch[2].toLowerCase()
                const year = ordinalDateMatch[3]
                
                const dayMap: { [key: string]: string } = {
                  '–ø—ä—Ä–≤–∏': '01', '–≤—Ç–æ—Ä–∏': '02', '—Ç—Ä–µ—Ç–∏': '03', '—á–µ—Ç–≤—ä—Ä—Ç–∏': '04', '–ø–µ—Ç–∏': '05',
                  '—à–µ—Å—Ç–∏': '06', '—Å–µ–¥–º–∏': '07', '–æ—Å–º–∏': '08', '–¥–µ–≤–µ—Ç–∏': '09', '–¥–µ—Å–µ—Ç–∏': '10',
                  '–µ–¥–∏–Ω–∞–¥–µ—Å–µ—Ç–∏': '11', '–¥–≤–∞–Ω–∞–¥–µ—Å–µ—Ç–∏': '12', '—Ç—Ä–∏–Ω–∞–¥–µ—Å–µ—Ç–∏': '13', '—á–µ—Ç–∏—Ä–∏–Ω–∞–¥–µ—Å–µ—Ç–∏': '14', '–ø–µ—Ç–Ω–∞–¥–µ—Å–µ—Ç–∏': '15',
                  '—à–µ—Å—Ç–Ω–∞–¥–µ—Å–µ—Ç–∏': '16', '—Å–µ–¥–µ–º–Ω–∞–¥–µ—Å–µ—Ç–∏': '17', '–æ—Å–µ–º–Ω–∞–¥–µ—Å–µ—Ç–∏': '18', '–¥–µ–≤–µ—Ç–Ω–∞–¥–µ—Å–µ—Ç–∏': '19', '–¥–≤–∞–¥–µ—Å–µ—Ç–∏': '20',
                  '–¥–≤–∞–¥–µ—Å–µ—Ç –∏ –ø—ä—Ä–≤–∏': '21', '–¥–≤–∞–¥–µ—Å–µ—Ç –∏ –≤—Ç–æ—Ä–∏': '22', '–¥–≤–∞–¥–µ—Å–µ—Ç –∏ —Ç—Ä–µ—Ç–∏': '23', '–¥–≤–∞–¥–µ—Å–µ—Ç –∏ —á–µ—Ç–≤—ä—Ä—Ç–∏': '24', '–¥–≤–∞–¥–µ—Å–µ—Ç –∏ –ø–µ—Ç–∏': '25',
                  '–¥–≤–∞–¥–µ—Å–µ—Ç –∏ —à–µ—Å—Ç–∏': '26', '–¥–≤–∞–¥–µ—Å–µ—Ç –∏ —Å–µ–¥–º–∏': '27', '–¥–≤–∞–¥–µ—Å–µ—Ç –∏ –æ—Å–º–∏': '28', '–¥–≤–∞–¥–µ—Å–µ—Ç –∏ –¥–µ–≤–µ—Ç–∏': '29', '—Ç—Ä–∏–¥–µ—Å–µ—Ç–∏': '30', '—Ç—Ä–∏–¥–µ—Å–µ—Ç –∏ –ø—ä—Ä–≤–∏': '31'
                }
                
                const monthMap: { [key: string]: string } = {
                  '—è–Ω—É–∞—Ä–∏': '01', '—Ñ–µ–≤—Ä—É–∞—Ä–∏': '02', '–º–∞—Ä—Ç': '03', '–∞–ø—Ä–∏–ª': '04',
                  '–º–∞–π': '05', '—é–Ω–∏': '06', '—é–ª–∏': '07', '–∞–≤–≥—É—Å—Ç': '08',
                  '—Å–µ–ø—Ç–µ–º–≤—Ä–∏': '09', '–æ–∫—Ç–æ–º–≤—Ä–∏': '10', '–Ω–æ–µ–º–≤—Ä–∏': '11', '–¥–µ–∫–µ–º–≤—Ä–∏': '12'
                }
                
                const day = dayMap[dayName]
                const month = monthMap[monthName]
                if (day && month) {
                  result.date = `${year}-${month}-${day}`
                  console.log('üìÖ Extracted ordinal date:', result.date)
                }
              }
            }
            
            // –ê–∫–æ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω —á–∞—Å, –ø—Ä–æ–±–≤–∞–π –¥–∞ –≥–æ –∏–∑–≤–ª–µ—á–µ—à –æ—Ç —Ä–∞–∑–ª–∏—á–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–∏
            if (!result.time) {
              // –¢—ä—Ä—Å–∏ —á–∞—Å –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç HH:MM
              const timeFormatMatch = command.match(/(\d{1,2}):(\d{2})/)
              if (timeFormatMatch) {
                const hour = timeFormatMatch[1].padStart(2, '0')
                const minute = timeFormatMatch[2]
                result.time = `${hour}:${minute}`
                console.log('üïê Extracted time:', result.time)
              }
            }
            
            // –ê–∫–æ –≤—Å–µ –æ—â–µ –Ω—è–º–∞ —á–∞—Å, –ø—Ä–æ–±–≤–∞–π –¥–∞ –≥–æ –∏–∑–≤–ª–µ—á–µ—à –æ—Ç "–æ—Ç X —á–∞—Å–∞" —Ñ–æ—Ä–º–∞—Ç
            if (!result.time) {
              const fromHourMatch = command.match(/–æ—Ç\s+(\d{1,2})\s+(?:—á–∞—Å–∞|—á–∞—Å)/i)
              if (fromHourMatch) {
                const hour = fromHourMatch[1].padStart(2, '0')
                result.time = `${hour}:00`
                console.log('üïê Extracted time from "–æ—Ç X —á–∞—Å–∞":', result.time)
              }
            }
            
            // –ê–∫–æ –≤—Å–µ –æ—â–µ –Ω—è–º–∞ —á–∞—Å, –ø—Ä–æ–±–≤–∞–π –¥–∞ –≥–æ –∏–∑–≤–ª–µ—á–µ—à –æ—Ç "–≤ X —á–∞—Å–∞" —Ñ–æ—Ä–º–∞—Ç
            if (!result.time) {
              const atHourMatch = command.match(/–≤\s+(\d{1,2})\s+(?:—á–∞—Å–∞|—á–∞—Å)/i)
              if (atHourMatch) {
                const hour = atHourMatch[1].padStart(2, '0')
                result.time = `${hour}:00`
                console.log('üïê Extracted time from "–≤ X —á–∞—Å–∞":', result.time)
              }
            }
            
            // –ê–∫–æ –≤—Å–µ –æ—â–µ –Ω—è–º–∞ —á–∞—Å, –ø—Ä–æ–±–≤–∞–π –¥–∞ –≥–æ –∏–∑–≤–ª–µ—á–µ—à –æ—Ç "–æ—Ç HH:MM" —Ñ–æ—Ä–º–∞—Ç
            if (!result.time) {
              const fromTimeMatch = command.match(/–æ—Ç\s+(\d{1,2}):(\d{2})/i)
              if (fromTimeMatch) {
                const hour = fromTimeMatch[1].padStart(2, '0')
                const minute = fromTimeMatch[2]
                result.time = `${hour}:${minute}`
                console.log('üïê Extracted time from "–æ—Ç HH:MM":', result.time)
              }
            }
            
            // –ê–∫–æ –≤—Å–µ –æ—â–µ –Ω—è–º–∞ –¥–∞—Ç–∞, –ø—Ä–æ–±–≤–∞–π –¥–∞ —è –∏–∑–≤–ª–µ—á–µ—à –æ—Ç –∫—Ä–∞—è –Ω–∞ –∫–æ–º–∞–Ω–¥–∞—Ç–∞
            if (!result.date) {
              // –¢—ä—Ä—Å–∏ –¥–∞—Ç–∞ —Å–ª–µ–¥ –∏–º–µ—Ç–æ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
              const afterNameMatch = command.match(new RegExp(`${result.name}\\s+([0-9]{1,2}\\.[0-9]{1,2}(?:\\.[0-9]{4})?)`, 'i'))
              if (afterNameMatch) {
                const dateStr = afterNameMatch[1]
                const dateParts = dateStr.split('.')
                if (dateParts.length >= 2) {
                  const day = dateParts[0]
                  const month = dateParts[1]
                  const year = dateParts[2] || getBulgariaTime().getFullYear()
                  result.date = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`
                  console.log('üìÖ Extracted date from after name:', result.date)
                }
              }
            }
            
            // –ê–∫–æ –≤—Å–µ –æ—â–µ –Ω—è–º–∞ –¥–∞—Ç–∞, –ø—Ä–æ–±–≤–∞–π –¥–∞ —è –∏–∑–≤–ª–µ—á–µ—à —Å–ª–µ–¥ "–∑–∞" –∏–ª–∏ "–Ω–∞"
            if (!result.date) {
              const forDateMatch = command.match(/(?:–∑–∞|–Ω–∞)\s+(\d{1,2})\s+(—è–Ω—É–∞—Ä–∏|—Ñ–µ–≤—Ä—É–∞—Ä–∏|–º–∞—Ä—Ç|–∞–ø—Ä–∏–ª|–º–∞–π|—é–Ω–∏|—é–ª–∏|–∞–≤–≥—É—Å—Ç|—Å–µ–ø—Ç–µ–º–≤—Ä–∏|–æ–∫—Ç–æ–º–≤—Ä–∏|–Ω–æ–µ–º–≤—Ä–∏|–¥–µ–∫–µ–º–≤—Ä–∏)\s+(\d{4})/i)
              if (forDateMatch) {
                const day = forDateMatch[1]
                const monthName = forDateMatch[2].toLowerCase()
                const year = forDateMatch[3]
                
                const monthMap: { [key: string]: string } = {
                  '—è–Ω—É–∞—Ä–∏': '01', '—Ñ–µ–≤—Ä—É–∞—Ä–∏': '02', '–º–∞—Ä—Ç': '03', '–∞–ø—Ä–∏–ª': '04',
                  '–º–∞–π': '05', '—é–Ω–∏': '06', '—é–ª–∏': '07', '–∞–≤–≥—É—Å—Ç': '08',
                  '—Å–µ–ø—Ç–µ–º–≤—Ä–∏': '09', '–æ–∫—Ç–æ–º–≤—Ä–∏': '10', '–Ω–æ–µ–º–≤—Ä–∏': '11', '–¥–µ–∫–µ–º–≤—Ä–∏': '12'
                }
                
                const month = monthMap[monthName]
                if (month) {
                  result.date = `${year}-${month}-${day.padStart(2, '0')}`
                  console.log('üìÖ Extracted date from "–∑–∞/–Ω–∞":', result.date)
                }
              }
            }
            
            // –ê–∫–æ –≤—Å–µ –æ—â–µ –Ω—è–º–∞ —á–∞—Å, –ø—Ä–æ–±–≤–∞–π –¥–∞ –≥–æ –∏–∑–≤–ª–µ—á–µ—à –æ—Ç –∫—Ä–∞—è –Ω–∞ –∫–æ–º–∞–Ω–¥–∞—Ç–∞
            if (!result.time) {
              // –¢—ä—Ä—Å–∏ —á–∞—Å —Å–ª–µ–¥ –¥–∞—Ç–∞—Ç–∞
              const afterDateMatch = command.match(/(\d{1,2}):(\d{2})/)
              if (afterDateMatch) {
                const hour = afterDateMatch[1].padStart(2, '0')
                const minute = afterDateMatch[2]
                result.time = `${hour}:${minute}`
                console.log('üïê Extracted time from after date:', result.time)
              }
            }
            
            break
          case 'updateBooking':
            result.name = match[1]?.trim()
            
            const updateDateMatch = command.match(/(?:–¥–∞—Ç–∞|–¥–µ–Ω)\s+([^\s]+)/i)
            const updateTimeMatch = command.match(/(?:—á–∞—Å|–≤—Ä–µ–º–µ)\s+([^\s]+)/i)
            
            result.date = updateDateMatch?.[1]?.trim()
            result.time = updateTimeMatch?.[1]?.trim()
            break
          case 'cancelBooking':
            result.name = match[1]?.trim()
            
            const cancelDateMatch = command.match(/(?:–¥–∞—Ç–∞|–¥–µ–Ω)\s+([^\s]+)/i)
            result.date = cancelDateMatch?.[1]?.trim()
            break
          case 'deleteBooking':
            result.name = match[1]?.trim()
            
            const deleteDateMatch = command.match(/(?:–¥–∞—Ç–∞|–¥–µ–Ω)\s+([^\s]+)/i)
            result.date = deleteDateMatch?.[1]?.trim()
            break
          case 'checkAvailability':
            result.date = match[1]?.trim()
            break
          case 'showBookings':
            result.date = match[1]?.trim()
            break
        }

        console.log('üì§ Parsed result:', result)
        console.log('================================')
        return result
      }
    }

    console.log('‚ùå No pattern matched')
    console.log('================================')
    return { action: '', originalCommand: command }
  }

  // Voice command templates
  const voiceTemplates = [
    '–¥–æ–±–∞–≤–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª',
    '–ø—Ä–æ–º–µ–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª', 
    '–∏–∑—Ç—Ä–∏–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª',
    '–¥–æ–±–∞–≤–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è',
    '–ø—Ä–æ–º–µ–Ω–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è',
    '–æ—Ç–º–µ–Ω–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è',
    '–∏–∑—Ç—Ä–∏–π —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è',
    '–ø—Ä–æ–≤–µ—Ä–∏ —Å–≤–æ–±–æ–¥–Ω–∏ —á–∞—Å–æ–≤–µ',
    '–ø–æ–∫–∞–∂–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏'
  ]

  const startVoiceRecognition = useCallback(async () => {
    if (voiceState.isMobile && !voiceState.isSupported) {
      // On iOS or unsupported mobile, show smart interface
      setShowSmartInterface(true)
      return
    }

    if (!recognitionRef.current) {
      setVoiceState(prev => ({ ...prev, error: '–ì–ª–∞—Å–æ–≤–æ—Ç–æ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–µ –µ –ø–æ–¥–¥—ä—Ä–∂–∞–Ω–æ' }))
      return
    }

    try {
      // Clear any existing timeout
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current)
      }
      
      await recognitionRef.current.start()
      
      // Set a longer timeout (10 seconds) before auto-stopping
      timeoutRef.current = setTimeout(() => {
        if (recognitionRef.current && voiceState.isListening) {
          console.log('üé§ Auto-stopping voice recognition after timeout')
          recognitionRef.current.stop()
        }
      }, 10000) // 10 seconds
      
    } catch (error) {
      console.error('Failed to start voice recognition:', error)
      setVoiceState(prev => ({ 
        ...prev, 
        error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≥–ª–∞—Å–æ–≤–æ—Ç–æ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ' 
      }))
    }
  }, [voiceState.isMobile, voiceState.isSupported, voiceState.isListening])

  const stopVoiceRecognition = useCallback(() => {
    if (recognitionRef.current) {
      recognitionRef.current.stop()
    }
    
    // Clear timeout
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current)
      timeoutRef.current = null
    }
    
    setVoiceState(prev => ({ ...prev, isListening: false }))
  }, [])

  const handleVoiceSubmit = useCallback(async () => {
    if (!voiceState.transcript.trim()) return

    setIsProcessing(true)
    setVoiceState(prev => ({ ...prev, error: '' }))
    setSuccess('')

    try {
      // Clean the transcript before parsing - replace klyomba with @ symbol
      const cleanedTranscript = cleanTranscript(voiceState.transcript)
      
      // Check if original transcript was longer than cleaned (indicating multiple commands)
      if (voiceState.transcript.length > cleanedTranscript.length + 50) {
        setVoiceState(prev => ({ 
          ...prev, 
          error: '–û—Ç–∫—Ä–∏—Ç–∏ —Å–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥–∏. –ò–∑–ø—ä–ª–Ω—è–≤–∞ —Å–µ —Å–∞–º–æ –ø—ä—Ä–≤–∞—Ç–∞ –∫–æ–º–∞–Ω–¥–∞.' 
        }))
        // Update the transcript to show only the first command
        setVoiceState(prev => ({ ...prev, transcript: cleanedTranscript }))
      }
      
      // Parse the voice command
      const parsedCommand = parseVoiceCommand(cleanedTranscript)
      
      if (!parsedCommand.action) {
        setVoiceState(prev => ({ 
          ...prev, 
          error: '–ù–µ—Ä–∞–∑–ø–æ–∑–Ω–∞—Ç–∞ –∫–æ–º–∞–Ω–¥–∞. –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.' 
        }))
        return
      }

      console.log('üì§ Sending command to API:', parsedCommand)

      const adminToken = localStorage.getItem('adminToken');
      const response = await fetch('/api/admin/voice-commands', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-admin-token': adminToken || ''
        },
        body: JSON.stringify(parsedCommand)
      })

      const result = await response.json()
      console.log('üì• API response:', result)

      if (result.success) {
        setSuccess(result.message || '–ö–æ–º–∞–Ω–¥–∞—Ç–∞ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
        setVoiceState(prev => ({ ...prev, transcript: '' }))
        onCommand(voiceState.transcript)
      } else {
        setVoiceState(prev => ({ ...prev, error: result.error || '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥–∞—Ç–∞' }))
      }
    } catch (error) {
      console.error('Voice command error:', error)
      setVoiceState(prev => ({ ...prev, error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∫–æ–º–∞–Ω–¥–∞—Ç–∞' }))
    } finally {
      setIsProcessing(false)
    }
  }, [voiceState.transcript, onCommand])

  const handleSmartCommand = useCallback(async (command: string) => {
    setIsProcessing(true)
    setSuccess('')
    setVoiceState(prev => ({ ...prev, error: '' }))

    try {
      // Clean the command before parsing - replace klyomba with @ symbol
      const cleanedCommand = cleanTranscript(command)
      
      // Parse the command
      const parsedCommand = parseVoiceCommand(cleanedCommand)
      
      if (!parsedCommand.action) {
        setVoiceState(prev => ({ 
          ...prev, 
          error: '–ù–µ—Ä–∞–∑–ø–æ–∑–Ω–∞—Ç–∞ –∫–æ–º–∞–Ω–¥–∞. –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ.' 
        }))
        return
      }

      console.log('üì§ Sending smart command to API:', parsedCommand)

      const adminToken = localStorage.getItem('adminToken');
      const response = await fetch('/api/admin/voice-commands', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-admin-token': adminToken || ''
        },
        body: JSON.stringify(parsedCommand)
      })

      const result = await response.json()
      console.log('üì• API response:', result)

      if (result.success) {
        setSuccess(result.message || '–ö–æ–º–∞–Ω–¥–∞—Ç–∞ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
        onCommand(command)
      } else {
        setVoiceState(prev => ({ ...prev, error: result.error || '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥–∞—Ç–∞' }))
      }
    } catch (error) {
      console.error('Smart command error:', error)
      setVoiceState(prev => ({ ...prev, error: '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∫–æ–º–∞–Ω–¥–∞—Ç–∞' }))
    } finally {
      setIsProcessing(false)
    }
  }, [onCommand])

  // Helper function to clean transcript
  const cleanTranscript = (text: string): string => {
    // Clean the text and take only the first command if multiple are present
    let cleaned = text
      .replace(/\b–∫–ª—å–æ–º–±–∞\b/gi, '@')
      .replace(/\bklyomba\b/gi, '@')
    
    // If there are multiple commands (separated by common patterns), take only the first one
    const commandSeparators = [
      /–ø—Ä–æ–º–µ–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª.*?(?=–ø—Ä–æ–º–µ–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª)/gi,
      /–¥–æ–±–∞–≤–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª.*?(?=–¥–æ–±–∞–≤–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª)/gi,
      /–∏–∑—Ç—Ä–∏–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª.*?(?=–∏–∑—Ç—Ä–∏–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª)/gi,
      /–¥–æ–±–∞–≤–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è.*?(?=–¥–æ–±–∞–≤–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è)/gi,
      /–ø—Ä–æ–º–µ–Ω–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è.*?(?=–ø—Ä–æ–º–µ–Ω–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è)/gi,
      /–æ—Ç–º–µ–Ω–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è.*?(?=–æ—Ç–º–µ–Ω–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è)/gi,
      /–∑–∞–ø–∞–∑–∏ —á–∞—Å.*?(?=–∑–∞–ø–∞–∑–∏ —á–∞—Å)/gi,
      /–∑–∞–ø–∏—à–∏ —á–∞—Å.*?(?=–∑–∞–ø–∏—à–∏ —á–∞—Å)/gi
    ]
    
    // Find the first complete command
    for (const separator of commandSeparators) {
      const match = cleaned.match(separator)
      if (match) {
        cleaned = match[0].trim()
        break
      }
    }
    
    // If the text is too long (more than 200 characters), truncate it
    if (cleaned.length > 200) {
      cleaned = cleaned.substring(0, 200) + '...'
    }
    
    return cleaned
  }

  return (
    <div className="fixed bottom-4 right-4 z-50">
      <div className="bg-white rounded-xl shadow-2xl border border-gray-200 p-4 w-80 max-w-sm">
        {/* Header */}
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center space-x-2">
            <Volume2 className="w-5 h-5 text-blue-600" />
            <h3 className="font-semibold text-gray-900">–ì–ª–∞—Å–æ–≤–∏ –∫–æ–º–∞–Ω–¥–∏</h3>
            {voiceState.isMobile && <Smartphone className="w-4 h-4 text-gray-500" />}
          </div>
          <div className="flex items-center space-x-2">
            {onClose && (
              <button 
                onClick={onClose}
                className="p-1 rounded-lg hover:bg-gray-100 transition-colors"
                title="–ó–∞—Ç–≤–æ—Ä–∏"
              >
                <X className="w-4 h-4 text-gray-500" />
              </button>
            )}
          </div>
        </div>

        {/* Voice Recognition Section */}
        {voiceState.isSupported ? (
          <div className="space-y-3">
            {/* Voice Button */}
            <div className="flex justify-center">
              <button
                data-voice-trigger
                onClick={voiceState.isListening ? stopVoiceRecognition : startVoiceRecognition}
                className={`p-4 rounded-full transition-all duration-200 ${
                  voiceState.isListening 
                    ? 'bg-red-500 hover:bg-red-600 text-white' 
                    : 'bg-blue-500 hover:bg-blue-600 text-white'
                }`}
              >
                {voiceState.isListening ? (
                  <MicOff className="w-6 h-6" />
                ) : (
                  <Mic className="w-6 h-6" />
                )}
              </button>
            </div>

            {/* Status */}
            <div className="text-center">
              <p className="text-sm text-gray-600">
                {voiceState.isListening ? 'üé§ –ì–æ–≤–æ—Ä–µ—Ç–µ...' : '–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ –∑–∞ –¥–∞ –≥–æ–≤–æ—Ä–∏—Ç–µ'}
              </p>
            </div>

            {/* Transcript */}
            {voiceState.transcript && (
              <div className="space-y-2">
                <textarea
                  ref={inputRef}
                  value={voiceState.transcript}
                  onChange={(e) => {
                    // Clean the input when user types - replace klyomba with @ symbol
                    const cleanValue = e.target.value
                      .replace(/\b–∫–ª—å–æ–º–±–∞\b/gi, '@')
                      .replace(/\bklyomba\b/gi, '@')
                    setVoiceState(prev => ({ ...prev, transcript: cleanValue }))
                  }}
                  placeholder="–í–∞—à–∞—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —â–µ —Å–µ –ø–æ—è–≤–∏ —Ç—É–∫..."
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                  rows={3}
                />
                
                {/* Warning for multiple commands */}
                {voiceState.transcript.length > 150 && (
                  <div className="text-xs text-amber-600 bg-amber-50 border border-amber-200 rounded px-2 py-1">
                    ‚ö†Ô∏è –î—ä–ª–≥–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–∫—Ä–∏—Ç–∞. –£–≤–µ—Ä–µ—Ç–µ —Å–µ, —á–µ –≤—ä–≤–µ–∂–¥–∞—Ç–µ —Å–∞–º–æ –µ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞.
                  </div>
                )}
                
                <div className="flex space-x-2">
                  <button
                    onClick={handleVoiceSubmit}
                    disabled={isProcessing}
                    className="flex-1 bg-green-500 hover:bg-green-600 text-white px-3 py-2 rounded-lg text-sm font-medium disabled:opacity-50"
                  >
                    {isProcessing ? '–û–±—Ä–∞–±–æ—Ç–≤–∞...' : '–ò–∑–ø—ä–ª–Ω–∏'}
                  </button>
                  
                  <button
                    onClick={() => setShowSmartInterface(true)}
                    className="px-3 py-2 border border-gray-300 rounded-lg text-sm hover:bg-gray-50"
                  >
                    <Command className="w-4 h-4" />
                  </button>
                </div>
              </div>
            )}
          </div>
        ) : (
          /* Fallback for unsupported devices */
          <div className="space-y-3">
            <div className="text-center p-4 bg-gray-50 rounded-lg">
              <Smartphone className="w-8 h-8 text-gray-400 mx-auto mb-2" />
              <p className="text-sm text-gray-600 mb-2">
                {voiceState.isMobile 
                  ? '–ù–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ Smart Command Interface'
                  : '–ì–ª–∞—Å–æ–≤–æ—Ç–æ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–µ –µ –ø–æ–¥–¥—ä—Ä–∂–∞–Ω–æ'
                }
              </p>
              <button
                onClick={() => setShowSmartInterface(true)}
                className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium"
              >
                –û—Ç–≤–æ—Ä–∏ Smart Interface
              </button>
            </div>
          </div>
        )}

        {/* Smart Command Interface */}
        {showSmartInterface && (
          <div className="mt-4 p-3 bg-gray-50 rounded-lg">
            <div className="flex items-center justify-between mb-2">
              <h4 className="font-medium text-gray-900">Smart Command Interface</h4>
              <button
                onClick={() => setShowSmartInterface(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X className="w-4 h-4" />
              </button>
            </div>
            
            <input
              type="text"
              placeholder="–í—ä–≤–µ–¥–µ—Ç–µ –∫–æ–º–∞–Ω–¥–∞..."
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-2"
              onKeyPress={(e) => {
                if (e.key === 'Enter') {
                  const target = e.target as HTMLInputElement
                  if (target.value.trim()) {
                    // Clean the input before sending - replace klyomba with @ symbol
                    const cleanValue = cleanTranscript(target.value.trim())
                    handleSmartCommand(cleanValue)
                    target.value = ''
                  }
                }
              }}
            />
            
            <div className="grid grid-cols-2 gap-1">
              {voiceTemplates.map((template, index) => (
                <button
                  key={index}
                  onClick={() => {
                    // Clean the template before sending - replace klyomba with @ symbol
                    const cleanTemplate = template
                      .replace(/\b–∫–ª—å–æ–º–±–∞\b/gi, '@')
                      .replace(/\bklyomba\b/gi, '@')
                    handleSmartCommand(cleanTemplate)
                  }}
                  className="text-xs px-2 py-1 bg-white border border-gray-200 rounded hover:bg-gray-50"
                >
                  {template}
                </button>
              ))}
            </div>
          </div>
        )}

        {/* Error Messages */}
        {voiceState.error && (
          <div className="flex items-center space-x-2 p-2 bg-red-50 border border-red-200 rounded-lg mt-3">
            <AlertCircle className="w-4 h-4 text-red-500" />
            <span className="text-sm text-red-700">{voiceState.error}</span>
          </div>
        )}

        {/* Success Messages */}
        {success && (
          <div className="flex items-center space-x-2 p-2 bg-green-50 border border-green-200 rounded-lg mt-3">
            <Check className="w-4 h-4 text-green-500" />
            <span className="text-sm text-green-700">{success}</span>
          </div>
        )}

        {/* Help Section */}
        <div className="text-xs text-gray-500 mt-3">
          <p>üí° –ü—Ä–∏–º–µ—Ä–∏: &quot;–¥–æ–±–∞–≤–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –ò–≤–∞–Ω —Ç–µ–ª–µ—Ñ–æ–Ω 0888123456&quot;</p>
          <p>üí° &quot;–¥–æ–±–∞–≤–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è –ü–µ—Ç—ä—Ä 15.12.2024 14:00&quot;</p>
        </div>
      </div>
    </div>
  )
}

export default VoiceInterface 