// üß™ –¢–µ—Å—Ç –∑–∞ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–¥–∞–ª–∞ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
const puppeteer = require('puppeteer');

async function testUsersModalClose() {
  console.log('üéØ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–¥–∞–ª–∞ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏...');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    slowMo: 100 
  });
  
  const page = await browser.newPage();
  await page.setViewport({ width: 1920, height: 1080 });
  
  // –û–±—Ä–∞–±–æ—Ç–≤–∞–π alert –¥–∏–∞–ª–æ–∑–∏—Ç–µ
  page.on('dialog', dialog => {
    console.log('üìã Alert –¥–∏–∞–ª–æ–≥:', dialog.message());
    dialog.accept();
  });
  
  // –û–±—Ä–∞–±–æ—Ç–≤–∞–π console –ª–æ–≥–æ–≤–µ –æ—Ç –±—Ä–∞—É–∑—ä—Ä–∞
  page.on('console', msg => {
    console.log('üìã Browser console:', msg.text());
  });
  
  try {
    // 1. Login
    console.log('üìã Login...');
    await page.goto('http://localhost:3000/admin/login');
    await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    await page.type('input[name="username"]', 'admin');
    await page.type('input[name="password"]', 'admin123');
    await page.click('button[type="submit"]');
    await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    // 2. –û—Ç–∏–¥–∏ –≤ —Å–µ–∫—Ü–∏—è –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
    console.log('üìã –û—Ç–∏–≤–∞–º –≤ —Å–µ–∫—Ü–∏—è –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏...');
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      console.log('All button texts:', buttons.map(btn => btn.textContent.trim()));
      const usersBtn = buttons.find(btn => btn.textContent.trim() === '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏');
      console.log('Found users button:', !!usersBtn);
      if (usersBtn) {
        console.log('Clicking users button...');
        usersBtn.click();
      } else {
        console.log('Users button not found, trying alternative selector...');
        // –û–ø–∏—Ç–∞–π –¥–∞ –Ω–∞–º–µ—Ä–∏—à –±—É—Ç–æ–Ω–∞ –ø–æ –∫–ª–∞—Å –∏–ª–∏ –∞—Ç—Ä–∏–±—É—Ç
        const altUsersBtn = document.querySelector('button[data-tab="users"]') || 
                           document.querySelector('button[aria-label*="–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏"]') ||
                           document.querySelector('button:contains("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏")');
        if (altUsersBtn) {
          console.log('Found users button with alternative selector');
          altUsersBtn.click();
        }
      }
    });
    await (page.waitForTimeout ? page.waitForTimeout(3000) : new Promise(resolve => setTimeout(resolve, 3000)));
    
    // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ —Å–µ —Å–º–µ–Ω–∏ —Å–µ–∫—Ü–∏—è—Ç–∞
    const newTab = await page.evaluate(() => {
      const activeTab = document.querySelector('.bg-blue-600');
      return activeTab ? activeTab.textContent : 'No active tab';
    });
    console.log('üìã –°–ª–µ–¥ –∫–ª–∏–∫ —Å–µ–∫—Ü–∏—è:', newTab);
    
    // 3. –¢–ï–°–¢ 1: –û—Ç–≤–æ—Ä–∏ –º–æ–¥–∞–ª–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –∏ –∫–ª–∏–∫–Ω–∏ "–û—Ç–∫–∞–∑"
    console.log('\nüß™ –¢–ï–°–¢ 1: –û—Ç–≤–∞—Ä—è–Ω–µ –∏ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ —Å "–û—Ç–∫–∞–∑"');
    
    // Debug: –ø—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ —Å–º–µ –≤ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Å–µ–∫—Ü–∏—è
    const currentTab = await page.evaluate(() => {
      const activeTab = document.querySelector('.bg-blue-600');
      return activeTab ? activeTab.textContent : 'No active tab';
    });
    console.log('üìã –¢–µ–∫—É—â–∞ —Å–µ–∫—Ü–∏—è:', currentTab);
    
    // Debug: –ø—Ä–æ–≤–µ—Ä–∏ –≤—Å–∏—á–∫–∏ –±—É—Ç–æ–Ω–∏
    const allButtons = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      return buttons.map(btn => btn.textContent.trim()).filter(text => text);
    });
    console.log('üìã –ù–∞–º–µ—Ä–µ–Ω–∏ –±—É—Ç–æ–Ω–∏:', allButtons);
    
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const addUserBtn = buttons.find(btn => btn.textContent.trim() === '–î–æ–±–∞–≤–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª');
      if (addUserBtn) addUserBtn.click();
    });
    await (page.waitForTimeout ? page.waitForTimeout(1000) : new Promise(resolve => setTimeout(resolve, 1000)));
    
    // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ —Å–µ –æ—Ç–≤–æ—Ä–∏ –º–æ–¥–∞–ª
    const modalOpened = await page.evaluate(() => {
      const modal = document.querySelector('form');
      return !!modal;
    });
    
    if (modalOpened) {
      console.log('‚úÖ –ú–æ–¥–∞–ª—ä—Ç –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å–µ –æ—Ç–≤–æ—Ä–∏');
      
      // –ö–ª–∏–∫–Ω–∏ "–û—Ç–∫–∞–∑"
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        const cancelBtn = buttons.find(btn => btn.textContent.trim() === '–û—Ç–∫–∞–∑');
        if (cancelBtn) cancelBtn.click();
      });
      
      await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
      
      // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –º–æ–¥–∞–ª—ä—Ç —Å–µ –∑–∞—Ç–≤–æ—Ä–∏
      const modalClosed = await page.evaluate(() => {
        const modal = document.querySelector('form');
        return !modal;
      });
      
      if (modalClosed) {
        console.log('‚úÖ –ú–æ–¥–∞–ª—ä—Ç —Å–µ –∑–∞—Ç–≤–æ—Ä–∏ —Å "–û—Ç–∫–∞–∑"');
      } else {
        console.log('‚ùå –ú–æ–¥–∞–ª—ä—Ç –Ω–µ —Å–µ –∑–∞—Ç–≤–æ—Ä–∏ —Å "–û—Ç–∫–∞–∑"');
      }
    } else {
      console.log('‚ùå –ú–æ–¥–∞–ª—ä—Ç –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –Ω–µ —Å–µ –æ—Ç–≤–æ—Ä–∏');
    }
    
    // 4. –¢–ï–°–¢ 2: –û—Ç–≤–æ—Ä–∏ –º–æ–¥–∞–ª–∞ –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –∏ –∫–ª–∏–∫–Ω–∏ "–û—Ç–∫–∞–∑"
    console.log('\nüß™ –¢–ï–°–¢ 2: –û—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –∏ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ —Å "–û—Ç–∫–∞–∑"');
    await page.evaluate(() => {
      const tableButtons = Array.from(document.querySelectorAll('table button'));
      const editBtn = tableButtons.find(btn => {
        const svg = btn.querySelector('svg');
        return svg && btn.className.includes('text-blue-600') && !btn.className.includes('text-red-600');
      });
      if (editBtn) editBtn.click();
    });
    await (page.waitForTimeout ? page.waitForTimeout(1000) : new Promise(resolve => setTimeout(resolve, 1000)));
    
    const editModalOpened = await page.evaluate(() => {
      const modal = document.querySelector('form');
      return !!modal;
    });
    
    if (editModalOpened) {
      console.log('‚úÖ –ú–æ–¥–∞–ª—ä—Ç –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ —Å–µ –æ—Ç–≤–æ—Ä–∏');
      
      // –ö–ª–∏–∫–Ω–∏ "–û—Ç–∫–∞–∑"
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        const cancelBtn = buttons.find(btn => btn.textContent.trim() === '–û—Ç–∫–∞–∑');
        if (cancelBtn) cancelBtn.click();
      });
      
      await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
      
      const editModalClosed = await page.evaluate(() => {
        const modal = document.querySelector('form');
        return !modal;
      });
      
      if (editModalClosed) {
        console.log('‚úÖ –ú–æ–¥–∞–ª—ä—Ç –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ —Å–µ –∑–∞—Ç–≤–æ—Ä–∏ —Å "–û—Ç–∫–∞–∑"');
      } else {
        console.log('‚ùå –ú–æ–¥–∞–ª—ä—Ç –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–µ —Å–µ –∑–∞—Ç–≤–æ—Ä–∏ —Å "–û—Ç–∫–∞–∑"');
      }
    } else {
      console.log('‚ùå –ú–æ–¥–∞–ª—ä—Ç –∑–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–µ —Å–µ –æ—Ç–≤–æ—Ä–∏');
    }
    
    // 5. –¢–ï–°–¢ 3: –û—Ç–≤–æ—Ä–∏ –º–æ–¥–∞–ª–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –∏ –ø–æ–ø—ä–ª–Ω–∏ –º–∏–Ω–∏–º–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ —Ç–µ—Å—Ç –Ω–∞ "–î–æ–±–∞–≤–∏"
    console.log('\nüß™ –¢–ï–°–¢ 3: –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ "–î–æ–±–∞–≤–∏" —Å –º–∏–Ω–∏–º–∞–ª–Ω–∏ –¥–∞–Ω–Ω–∏');
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const addUserBtn = buttons.find(btn => btn.textContent.trim() === '–î–æ–±–∞–≤–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª');
      if (addUserBtn) addUserBtn.click();
    });
    await (page.waitForTimeout ? page.waitForTimeout(1000) : new Promise(resolve => setTimeout(resolve, 1000)));
    
         // –ü–æ–ø—ä–ª–Ω–∏ —Å–∞–º–æ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ—Ç–∞ —Å —É–Ω–∏–∫–∞–ª–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω–µ–Ω –Ω–æ–º–µ—Ä
     const uniquePhone = `+359888${Date.now()}`;
     await page.type('input[name="name"]', 'Test User');
     await page.type('input[name="phone"]', uniquePhone);
    
    // –ö–ª–∏–∫–Ω–∏ "–î–æ–±–∞–≤–∏"
    await page.click('button[type="submit"]');
    
    await (page.waitForTimeout ? page.waitForTimeout(5000) : new Promise(resolve => setTimeout(resolve, 5000)));
    
    // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –º–æ–¥–∞–ª—ä—Ç —Å–µ –∑–∞—Ç–≤–æ—Ä–∏
    const addModalClosed = await page.evaluate(() => {
      const modal = document.querySelector('form');
      return !modal;
    });
    
    if (addModalClosed) {
      console.log('‚úÖ –ú–æ–¥–∞–ª—ä—Ç —Å–µ –∑–∞—Ç–≤–æ—Ä–∏ —Å–ª–µ–¥ "–î–æ–±–∞–≤–∏"');
    } else {
      console.log('‚ùå –ú–æ–¥–∞–ª—ä—Ç –Ω–µ —Å–µ –∑–∞—Ç–≤–æ—Ä–∏ —Å–ª–µ–¥ "–î–æ–±–∞–≤–∏"');
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç—ä—Ç –∑–∞ –∑–∞—Ç–≤–∞—Ä—è–Ω–µ –Ω–∞ –º–æ–¥–∞–ª–∞ –∑–∞–≤—ä—Ä—à–∏!');
    
  } catch (error) {
    console.error('üí• –ì—Ä–µ—à–∫–∞:', error.message);
  } finally {
    await browser.close();
  }
}

testUsersModalClose(); 