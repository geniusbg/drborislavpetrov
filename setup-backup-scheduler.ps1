# Database Backup Scheduler Setup
# –¢–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ–Ω backup –Ω–∞ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ –Ω–∞ –≤—Å–µ–∫–∏ —á–∞—Å

param(
    [string]$ProjectPath = $PSScriptRoot,
    [string]$BackupScript = "backup-database.js",
    [int]$IntervalHours = 1,
    [int]$RetentionDays = 5
)

Write-Host "Setting up Database Backup Scheduler..." -ForegroundColor Green
Write-Host "Project Path: $ProjectPath" -ForegroundColor Yellow
Write-Host "Backup Interval: $IntervalHours hour(s)" -ForegroundColor Yellow
Write-Host "Retention: $RetentionDays days" -ForegroundColor Yellow

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ Node.js –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω
try {
    $nodeVersion = node --version
    Write-Host "Node.js found: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "Node.js not found! Please install Node.js first." -ForegroundColor Red
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ backup —Å–∫—Ä–∏–ø—Ç—ä—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
$backupScriptPath = Join-Path $ProjectPath $BackupScript
if (-not (Test-Path $backupScriptPath)) {
    Write-Host "Backup script not found: $backupScriptPath" -ForegroundColor Red
    exit 1
}

Write-Host "Backup script found: $backupScriptPath" -ForegroundColor Green

# –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ PowerShell —Å–∫—Ä–∏–ø—Ç –∑–∞ backup
$backupScriptContent = @"
# Database Backup Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∏–∑–ø—ä–ª–Ω—è–≤–∞ backup –Ω–∞ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏

`$ProjectPath = "$ProjectPath"
`$BackupScript = "$BackupScript"
`$LogFile = Join-Path `$ProjectPath "backup.log"

Write-Host "üîÑ Starting scheduled backup..." -ForegroundColor Yellow
Write-Host "‚è∞ Time: `$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" -ForegroundColor Yellow

try {
    # –ò–∑–ø—ä–ª–Ω—è–≤–∞–Ω–µ –Ω–∞ backup —Å–∫—Ä–∏–ø—Ç–∞
    `$result = node "`$ProjectPath\`$BackupScript" 2>&1
    
    # –ó–∞–ø–∏—Å–≤–∞–Ω–µ –≤ log —Ñ–∞–π–ª
    `$logEntry = "`$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Backup completed successfully"
    Add-Content -Path `$LogFile -Value `$logEntry
    
    Write-Host "‚úÖ Backup completed successfully!" -ForegroundColor Green
} catch {
    `$errorMsg = "`$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Backup failed: `$(`$_.Exception.Message)"
    Add-Content -Path `$LogFile -Value `$errorMsg
    Write-Host "‚ùå Backup failed: `$(`$_.Exception.Message)" -ForegroundColor Red
}
"@

$backupScriptPath = Join-Path $ProjectPath "run-backup.ps1"
$backupScriptContent | Out-File -FilePath $backupScriptPath -Encoding UTF8
Write-Host "‚úÖ Created backup runner script: $backupScriptPath" -ForegroundColor Green

# –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ Scheduled Task
$taskName = "DrBorislavPetrov-DatabaseBackup"
$taskDescription = "Automatic database backup for Dr. Borislav Petrov application"

# –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∞—Ç–∞ –∑–∞–¥–∞—á–∞ –∞–∫–æ –∏–º–∞ —Ç–∞–∫–∞–≤–∞
try {
    Unregister-ScheduledTask -TaskName $taskName -Confirm:$false -ErrorAction SilentlyContinue
    Write-Host "üóëÔ∏è Removed existing scheduled task: $taskName" -ForegroundColor Yellow
} catch {
    # Task doesn't exist, continue
}

# –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –Ω–æ–≤–∞—Ç–∞ –∑–∞–¥–∞—á–∞
$action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-ExecutionPolicy Bypass -File `"$backupScriptPath`""
$trigger = New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Hours $IntervalHours) -RepetitionDuration (New-TimeSpan -Days 365)
$settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable

try {
    Register-ScheduledTask -TaskName $taskName -Action $action -Trigger $trigger -Settings $settings -Description $taskDescription -User "SYSTEM"
    Write-Host "‚úÖ Scheduled task created successfully!" -ForegroundColor Green
    Write-Host "üìã Task Name: $taskName" -ForegroundColor Yellow
    Write-Host "‚è∞ Schedule: Every $IntervalHours hour(s)" -ForegroundColor Yellow
    Write-Host "üìÅ Log File: $(Join-Path $ProjectPath 'backup.log')" -ForegroundColor Yellow
} catch {
    Write-Host "‚ùå Failed to create scheduled task: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "üí° Try running PowerShell as Administrator" -ForegroundColor Yellow
    exit 1
}

# –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ backup —Å–∫—Ä–∏–ø—Ç–∞
Write-Host "üß™ Testing backup script..." -ForegroundColor Yellow
try {
    $testResult = node $backupScriptPath 2>&1
    Write-Host "‚úÖ Backup test completed!" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Backup test failed: $($_.Exception.Message)" -ForegroundColor Red
}

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
Write-Host ""
Write-Host "üéâ Backup scheduler setup completed!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Management Commands:" -ForegroundColor Cyan
Write-Host "   View task: Get-ScheduledTask -TaskName '$taskName'" -ForegroundColor White
Write-Host "   Start task: Start-ScheduledTask -TaskName '$taskName'" -ForegroundColor White
Write-Host "   Stop task: Stop-ScheduledTask -TaskName '$taskName'" -ForegroundColor White
Write-Host "   Delete task: Unregister-ScheduledTask -TaskName '$taskName'" -ForegroundColor White
Write-Host "   View logs: Get-Content '$(Join-Path $ProjectPath 'backup.log')'" -ForegroundColor White
Write-Host ""
Write-Host "Backup files location: $(Join-Path $ProjectPath 'backups')" -ForegroundColor Cyan
Write-Host "Manual backup: node $BackupScript" -ForegroundColor Cyan 