// üß™ –ü—ä–ª–µ–Ω —Ç–µ—Å—Ç –∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ –ö–∞–ª–µ–Ω–¥–∞—Ä —Å–µ–∫—Ü–∏—è—Ç–∞
const puppeteer = require('puppeteer');

async function testCalendar() {
  console.log('üéØ –ü—ä–ª–µ–Ω —Ç–µ—Å—Ç –∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ –ö–∞–ª–µ–Ω–¥–∞—Ä...');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    slowMo: 100 
  });
  
  const page = await browser.newPage();
  await page.setViewport({ width: 1920, height: 1080 });
  
  // –û–±—Ä–∞–±–æ—Ç–≤–∞–π alert –¥–∏–∞–ª–æ–∑–∏—Ç–µ
  page.on('dialog', dialog => {
    console.log('üìã Alert –¥–∏–∞–ª–æ–≥:', dialog.message());
    dialog.accept();
  });
  
  // –û–±—Ä–∞–±–æ—Ç–≤–∞–π console –ª–æ–≥–æ–≤–µ –æ—Ç –±—Ä–∞—É–∑—ä—Ä–∞
  page.on('console', msg => {
    console.log('üìã Browser console:', msg.text());
  });
  
  try {
    // 1. Login
    console.log('üìã Login...');
    await page.goto('http://localhost:3000/admin/login', { waitUntil: 'networkidle0', timeout: 60000 });
    await (page.waitForTimeout ? page.waitForTimeout(3000) : new Promise(resolve => setTimeout(resolve, 3000)));
    
    await page.type('input[name="username"]', 'admin');
    await page.type('input[name="password"]', 'admin123');
    await page.click('button[type="submit"]');
    await (page.waitForTimeout ? page.waitForTimeout(5000) : new Promise(resolve => setTimeout(resolve, 5000)));
    
    // 2. –û—Ç–∏–¥–∏ –≤ —Å–µ–∫—Ü–∏—è –ö–∞–ª–µ–Ω–¥–∞—Ä
    console.log('üìã –û—Ç–∏–≤–∞–º –≤ —Å–µ–∫—Ü–∏—è –ö–∞–ª–µ–Ω–¥–∞—Ä...');
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const calendarBtn = buttons.find(btn => btn.textContent.trim() === '–ö–∞–ª–µ–Ω–¥–∞—Ä');
      if (calendarBtn) calendarBtn.click();
    });
    await (page.waitForTimeout ? page.waitForTimeout(3000) : new Promise(resolve => setTimeout(resolve, 3000)));
    
    // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ —Å–µ —Å–º–µ–Ω–∏ —Å–µ–∫—Ü–∏—è—Ç–∞
    const currentTab = await page.evaluate(() => {
      const activeTab = document.querySelector('.bg-blue-600');
      return activeTab ? activeTab.textContent : 'No active tab';
    });
    console.log('üìã –¢–µ–∫—É—â–∞ —Å–µ–∫—Ü–∏—è:', currentTab);
    
    if (currentTab !== '–ö–∞–ª–µ–Ω–¥–∞—Ä') {
      console.log('‚ùå –ù–µ —É—Å–ø—è—Ö –¥–∞ –æ—Ç–∏–¥–∞ –≤ —Å–µ–∫—Ü–∏—è –ö–∞–ª–µ–Ω–¥–∞—Ä');
      return;
    }
    
    // DEBUG: –ü–æ–∫–∞–∂–∏ –≤—Å–∏—á–∫–∏ –±—É—Ç–æ–Ω–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
    console.log('\nüîç DEBUG: –ê–Ω–∞–ª–∏–∑ –Ω–∞ –≤—Å–∏—á–∫–∏ –±—É—Ç–æ–Ω–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞...');
    const allButtons = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      return buttons.map(btn => ({
        text: btn.textContent.trim(),
        className: btn.className,
        hasSvg: !!btn.querySelector('svg'),
        svgContent: btn.querySelector('svg') ? btn.querySelector('svg').innerHTML : null
      }));
    });
    console.log('üìã –í—Å–∏—á–∫–∏ –±—É—Ç–æ–Ω–∏:', allButtons);
    
    // 3. –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è—Ç–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
    console.log('\nüß™ –¢–ï–°–¢ 1: –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞');
    
    // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –∏–º–∞ –±—É—Ç–æ–Ω–∏ –∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è (ChevronLeft, ChevronRight)
    const hasNavigation = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const prevBtn = buttons.find(btn => btn.querySelector('svg') && btn.querySelector('svg').innerHTML.includes('chevron-left'));
      const nextBtn = buttons.find(btn => btn.querySelector('svg') && btn.querySelector('svg').innerHTML.includes('chevron-right'));
      return { prev: !!prevBtn, next: !!nextBtn };
    });
    
    if (hasNavigation.prev && hasNavigation.next) {
      console.log('‚úÖ –ë—É—Ç–æ–Ω–∏—Ç–µ –∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å–∞ –Ω–∞–ª–∏—á–Ω–∏');
      
      // –¢–µ—Å—Ç–≤–∞–π –Ω–∞–≤–∏–≥–∞—Ü–∏—è—Ç–∞
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        const nextBtn = buttons.find(btn => btn.querySelector('svg') && btn.querySelector('svg').innerHTML.includes('chevron-right'));
        if (nextBtn) nextBtn.click();
      });
      await (page.waitForTimeout ? page.waitForTimeout(1000) : new Promise(resolve => setTimeout(resolve, 1000)));
      
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        const prevBtn = buttons.find(btn => btn.querySelector('svg') && btn.querySelector('svg').innerHTML.includes('chevron-left'));
        if (prevBtn) prevBtn.click();
      });
      await (page.waitForTimeout ? page.waitForTimeout(1000) : new Promise(resolve => setTimeout(resolve, 1000)));
      
      console.log('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è—Ç–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ —Ä–∞–±–æ—Ç–∏');
    } else {
      console.log('‚ùå –ë—É—Ç–æ–Ω–∏—Ç–µ –∑–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ —Å–∞ –Ω–∞–ª–∏—á–Ω–∏');
    }
    
    // 4. –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–Ω–µ—à–Ω–∞—Ç–∞ –¥–∞—Ç–∞
    console.log('\nüß™ –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–Ω–µ—à–Ω–∞—Ç–∞ –¥–∞—Ç–∞');
    
    const todayHighlighted = await page.evaluate(() => {
      const today = new Date();
      const todayCell = document.querySelector(`[data-date="${today.toISOString().split('T')[0]}"]`) ||
                       document.querySelector('.bg-blue-100') ||
                       document.querySelector('.border-blue-400');
      return !!todayCell;
    });
    
    if (todayHighlighted) {
      console.log('‚úÖ –î–Ω–µ—à–Ω–∞—Ç–∞ –¥–∞—Ç–∞ –µ –º–∞—Ä–∫–∏—Ä–∞–Ω–∞');
    } else {
      console.log('‚ùå –î–Ω–µ—à–Ω–∞—Ç–∞ –¥–∞—Ç–∞ –Ω–µ –µ –º–∞—Ä–∫–∏—Ä–∞–Ω–∞');
    }
    
    // 5. –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–∏–ª—Ç—Ä–∏ –∑–∞ —Å—Ç–∞—Ç—É—Å
    console.log('\nüß™ –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–∏–ª—Ç—Ä–∏ –∑–∞ —Å—Ç–∞—Ç—É—Å');
    
    const hasStatusFilters = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const filterButtons = buttons.filter(btn => 
        btn.textContent.includes('–í—Å–∏—á–∫–∏') || 
        btn.textContent.includes('–ß–∞–∫–∞—â–∏') || 
        btn.textContent.includes('–ü–æ—Ç–≤—ä—Ä–¥–µ–Ω–∏') || 
        btn.textContent.includes('–û—Ç–º–µ–Ω–µ–Ω–∏')
      );
      return filterButtons.length > 0;
    });
    
    if (hasStatusFilters) {
      console.log('‚úÖ –§–∏–ª—Ç—Ä–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç—É—Å —Å–∞ –Ω–∞–ª–∏—á–Ω–∏');
      
      // –¢–µ—Å—Ç–≤–∞–π —Ñ–∏–ª—Ç—Ä–∏—Ç–µ
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        const pendingBtn = buttons.find(btn => btn.textContent.includes('–ß–∞–∫–∞—â–∏'));
        if (pendingBtn) pendingBtn.click();
      });
      await (page.waitForTimeout ? page.waitForTimeout(1000) : new Promise(resolve => setTimeout(resolve, 1000)));
      
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        const confirmedBtn = buttons.find(btn => btn.textContent.includes('–ü–æ—Ç–≤—ä—Ä–¥–µ–Ω–∏'));
        if (confirmedBtn) confirmedBtn.click();
      });
      await (page.waitForTimeout ? page.waitForTimeout(1000) : new Promise(resolve => setTimeout(resolve, 1000)));
      
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        const allBtn = buttons.find(btn => btn.textContent.includes('–í—Å–∏—á–∫–∏'));
        if (allBtn) allBtn.click();
      });
      await (page.waitForTimeout ? page.waitForTimeout(1000) : new Promise(resolve => setTimeout(resolve, 1000)));
      
      console.log('‚úÖ –§–∏–ª—Ç—Ä–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—è—Ç');
    } else {
      console.log('‚ùå –§–∏–ª—Ç—Ä–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç—É—Å –Ω–µ —Å–∞ –Ω–∞–ª–∏—á–Ω–∏');
    }
    
    // 6. –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
    console.log('\nüß™ –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏');
    
    const hasBookings = await page.evaluate(() => {
      const bookingElements = document.querySelectorAll('[class*="bg-green-100"], [class*="bg-yellow-100"], [class*="bg-red-100"]');
      return bookingElements.length > 0;
    });
    
    if (hasBookings) {
      console.log('‚úÖ –ò–º–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞');
      
      // –¢–µ—Å—Ç–≤–∞–π –∫–ª–∏–∫–≤–∞–Ω–µ –≤—ä—Ä—Ö—É —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è
      await page.evaluate(() => {
        const bookingElement = document.querySelector('[class*="bg-green-100"], [class*="bg-yellow-100"], [class*="bg-red-100"]');
        if (bookingElement) bookingElement.click();
      });
      await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
      
      // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ —Å–µ –æ—Ç–≤–æ—Ä–∏ DailySchedule –º–æ–¥–∞–ª
      const dailyScheduleOpened = await page.evaluate(() => {
        const modal = document.querySelector('[class*="modal"], [class*="fixed"]');
        return !!modal;
      });
      
      if (dailyScheduleOpened) {
        console.log('‚úÖ DailySchedule –º–æ–¥–∞–ª—ä—Ç —Å–µ –æ—Ç–≤–æ—Ä–∏');
        
        // –ó–∞—Ç–≤–æ—Ä–∏ –º–æ–¥–∞–ª–∞
        await page.evaluate(() => {
          const buttons = Array.from(document.querySelectorAll('button'));
          const closeBtn = buttons.find(btn => btn.textContent.includes('√ó') || btn.textContent.includes('–ó–∞—Ç–≤–æ—Ä–∏'));
          if (closeBtn) closeBtn.click();
        });
        await (page.waitForTimeout ? page.waitForTimeout(1000) : new Promise(resolve => setTimeout(resolve, 1000)));
      } else {
        console.log('‚ùå DailySchedule –º–æ–¥–∞–ª—ä—Ç –Ω–µ —Å–µ –æ—Ç–≤–æ—Ä–∏');
      }
    } else {
      console.log('üìã –ù—è–º–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞');
    }
    
    // 7. –¢–ï–°–¢ 5: –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è
    console.log('\nüß™ –¢–ï–°–¢ 5: –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è');
    
    // –ö–ª–∏–∫–Ω–∏ –≤—ä—Ä—Ö—É —Å–≤–æ–±–æ–¥–Ω–∞ –¥–∞—Ç–∞
    await page.evaluate(() => {
      const today = new Date();
      const tomorrow = new Date(today);
      tomorrow.setDate(tomorrow.getDate() + 1);
      const tomorrowStr = tomorrow.toISOString().split('T')[0];
      
      const tomorrowCell = document.querySelector(`[data-date="${tomorrowStr}"]`) ||
                          document.querySelector('.cursor-pointer:not(.bg-blue-100):not([class*="bg-green"]):not([class*="bg-yellow"]):not([class*="bg-red"])');
      if (tomorrowCell) tomorrowCell.click();
    });
    await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ —Å–µ –æ—Ç–≤–æ—Ä–∏ DailySchedule –º–æ–¥–∞–ª
    const dailyScheduleOpened2 = await page.evaluate(() => {
      const modal = document.querySelector('[class*="modal"], [class*="fixed"]');
      return !!modal;
    });
    
    if (dailyScheduleOpened2) {
      console.log('‚úÖ DailySchedule –º–æ–¥–∞–ª—ä—Ç —Å–µ –æ—Ç–≤–æ—Ä–∏ –ø—Ä–∏ –∫–ª–∏–∫–≤–∞–Ω–µ –≤—ä—Ä—Ö—É –¥–∞—Ç–∞');
      
      // –ó–∞—Ç–≤–æ—Ä–∏ –º–æ–¥–∞–ª–∞
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        const closeBtn = buttons.find(btn => btn.textContent.includes('√ó') || btn.textContent.includes('–ó–∞—Ç–≤–æ—Ä–∏'));
        if (closeBtn) closeBtn.click();
      });
      await (page.waitForTimeout ? page.waitForTimeout(1000) : new Promise(resolve => setTimeout(resolve, 1000)));
    } else {
      console.log('‚ùå DailySchedule –º–æ–¥–∞–ª—ä—Ç –Ω–µ —Å–µ –æ—Ç–≤–æ—Ä–∏ –ø—Ä–∏ –∫–ª–∏–∫–≤–∞–Ω–µ –≤—ä—Ä—Ö—É –¥–∞—Ç–∞');
    }
    
    // 8. –¢–ï–°–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—É—Ç–æ–Ω "–î–æ–±–∞–≤–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è" (Plus –∏–∫–æ–Ω–∞) - –ø–æ–¥–æ–±—Ä–µ–Ω
    console.log('\nüß™ –¢–ï–°–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—É—Ç–æ–Ω "–î–æ–±–∞–≤–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è"');
    
    // –ü—ä—Ä–≤–æ –ø—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –∏–º–∞ –±—É—Ç–æ–Ω–∏ —Å Plus –∏–∫–æ–Ω–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏—Ç–µ –∫–ª–µ—Ç–∫–∏
    const hasAddButtons = await page.evaluate(() => {
      // –¢—ä—Ä—Å–∏ –±—É—Ç–æ–Ω–∏ —Å Plus –∏–∫–æ–Ω–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏—Ç–µ –∫–ª–µ—Ç–∫–∏
      const calendarCells = document.querySelectorAll('.cursor-pointer');
      let foundAddButtons = 0;
      
      calendarCells.forEach(cell => {
        const plusButtons = cell.querySelectorAll('button');
        plusButtons.forEach(btn => {
          if (btn.querySelector('svg') && btn.querySelector('svg').innerHTML.includes('plus')) {
            foundAddButtons++;
          }
        });
      });
      
      return foundAddButtons > 0;
    });
    
    if (hasAddButtons) {
      console.log('‚úÖ –ë—É—Ç–æ–Ω–∏—Ç–µ "–î–æ–±–∞–≤–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è" —Å–∞ –Ω–∞–ª–∏—á–Ω–∏');
      
      // –¢–µ—Å—Ç–≤–∞–π –∫–ª–∏–∫–≤–∞–Ω–µ –≤—ä—Ä—Ö—É –±—É—Ç–æ–Ω –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ
      await page.evaluate(() => {
        const calendarCells = document.querySelectorAll('.cursor-pointer');
        for (let cell of calendarCells) {
          const plusBtn = cell.querySelector('button svg');
          if (plusBtn && plusBtn.innerHTML.includes('plus')) {
            plusBtn.closest('button').click();
            break;
          }
        }
      });
      await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
      
      // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ —Å–µ –æ—Ç–≤–æ—Ä–∏ –º–æ–¥–∞–ª –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ
      const addModalOpened = await page.evaluate(() => {
        const modal = document.querySelector('form') || document.querySelector('.modal');
        return !!modal;
      });
      
      if (addModalOpened) {
        console.log('‚úÖ –ú–æ–¥–∞–ª—ä—Ç –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è —Å–µ –æ—Ç–≤–æ—Ä–∏');
        
        // –ó–∞—Ç–≤–æ—Ä–∏ –º–æ–¥–∞–ª–∞
        await page.evaluate(() => {
          const buttons = Array.from(document.querySelectorAll('button'));
          const closeBtn = buttons.find(btn => btn.textContent.includes('–û—Ç–∫–∞–∑') || btn.textContent.includes('√ó'));
          if (closeBtn) closeBtn.click();
        });
        await (page.waitForTimeout ? page.waitForTimeout(1000) : new Promise(resolve => setTimeout(resolve, 1000)));
      } else {
        console.log('‚ùå –ú–æ–¥–∞–ª—ä—Ç –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è –Ω–µ —Å–µ –æ—Ç–≤–æ—Ä–∏');
      }
    } else {
      console.log('‚ùå –ë—É—Ç–æ–Ω–∏—Ç–µ "–î–æ–±–∞–≤–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è" –Ω–µ —Å–∞ –Ω–∞–ª–∏—á–Ω–∏');
    }
    
    // 9. –¢–ï–°–¢ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ (Settings –∏–∫–æ–Ω–∞) - –ø–æ–¥–æ–±—Ä–µ–Ω
    console.log('\nüß™ –¢–ï–°–¢ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ');
    
    // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –∏–º–∞ –±—É—Ç–æ–Ω–∏ —Å Settings –∏–∫–æ–Ω–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏—Ç–µ –∫–ª–µ—Ç–∫–∏
    const hasWorkingHoursButtons = await page.evaluate(() => {
      const calendarCells = document.querySelectorAll('.cursor-pointer');
      let foundSettingsButtons = 0;
      
      calendarCells.forEach(cell => {
        const settingsButtons = cell.querySelectorAll('button');
        settingsButtons.forEach(btn => {
          if (btn.querySelector('svg') && btn.querySelector('svg').innerHTML.includes('settings')) {
            foundSettingsButtons++;
          }
        });
      });
      
      return foundSettingsButtons > 0;
    });
    
    if (hasWorkingHoursButtons) {
      console.log('‚úÖ –ë—É—Ç–æ–Ω–∏—Ç–µ –∑–∞ —Ä–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ —Å–∞ –Ω–∞–ª–∏—á–Ω–∏');
      
      // –¢–µ—Å—Ç–≤–∞–π –∫–ª–∏–∫–≤–∞–Ω–µ –≤—ä—Ä—Ö—É –±—É—Ç–æ–Ω –∑–∞ —Ä–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ
      await page.evaluate(() => {
        const calendarCells = document.querySelectorAll('.cursor-pointer');
        for (let cell of calendarCells) {
          const settingsBtn = cell.querySelector('button svg');
          if (settingsBtn && settingsBtn.innerHTML.includes('settings')) {
            settingsBtn.closest('button').click();
            break;
          }
        }
      });
      await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
      
      // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ —Å–µ –æ—Ç–≤–æ—Ä–∏ –º–æ–¥–∞–ª –∑–∞ —Ä–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ
      const workingHoursModalOpened = await page.evaluate(() => {
        const modal = document.querySelector('form') || document.querySelector('.modal');
        return !!modal;
      });
      
      if (workingHoursModalOpened) {
        console.log('‚úÖ –ú–æ–¥–∞–ª—ä—Ç –∑–∞ —Ä–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ —Å–µ –æ—Ç–≤–æ—Ä–∏');
        
        // –ó–∞—Ç–≤–æ—Ä–∏ –º–æ–¥–∞–ª–∞
        await page.evaluate(() => {
          const buttons = Array.from(document.querySelectorAll('button'));
          const closeBtn = buttons.find(btn => btn.textContent.includes('–û—Ç–∫–∞–∑') || btn.textContent.includes('√ó'));
          if (closeBtn) closeBtn.click();
        });
        await (page.waitForTimeout ? page.waitForTimeout(1000) : new Promise(resolve => setTimeout(resolve, 1000)));
      } else {
        console.log('‚ùå –ú–æ–¥–∞–ª—ä—Ç –∑–∞ —Ä–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ –Ω–µ —Å–µ –æ—Ç–≤–æ—Ä–∏');
      }
    } else {
      console.log('‚ùå –ë—É—Ç–æ–Ω–∏—Ç–µ –∑–∞ —Ä–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ –Ω–µ —Å–∞ –Ω–∞–ª–∏—á–Ω–∏');
    }
    
    // 10. –¢–ï–°–¢ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –∑–∞ —Ä–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ - –ø–æ–¥–æ–±—Ä–µ–Ω
    console.log('\nüß™ –¢–ï–°–¢ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –∑–∞ —Ä–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ');
    
    const hasWorkingHoursIndicators = await page.evaluate(() => {
      // –¢—ä—Ä—Å–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏—Ç–µ –∫–ª–µ—Ç–∫–∏
      const calendarCells = document.querySelectorAll('.cursor-pointer');
      let foundIndicators = 0;
      
      calendarCells.forEach(cell => {
        const indicators = cell.querySelectorAll('.w-2.h-2.bg-green-500, .w-2.h-2.bg-red-500, .w-2.h-2.rounded-full');
        foundIndicators += indicators.length;
      });
      
      return foundIndicators > 0;
    });
    
    if (hasWorkingHoursIndicators) {
      console.log('‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏—Ç–µ –∑–∞ —Ä–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ —Å–∞ –Ω–∞–ª–∏—á–Ω–∏');
    } else {
      console.log('üìã –ù—è–º–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –∑–∞ —Ä–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ');
    }
    
    // 11. –¢–ï–°–¢ 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ touch/swipe —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç
    console.log('\nüß™ –¢–ï–°–¢ 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ touch/swipe —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç');
    
    const hasTouchSupport = await page.evaluate(() => {
      const calendarGrid = document.querySelector('[onTouchStart]') || document.querySelector('[onTouchMove]') || document.querySelector('[onTouchEnd]');
      return !!calendarGrid;
    });
    
    if (hasTouchSupport) {
      console.log('‚úÖ Touch/swipe —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞ –µ –Ω–∞–ª–∏—á–Ω–∞');
    } else {
      console.log('üìã Touch/swipe —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç—Ç–∞ –Ω–µ –µ –Ω–∞–ª–∏—á–Ω–∞');
    }
    
    // 12. –¢–ï–°–¢ 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
    console.log('\nüß™ –¢–ï–°–¢ 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞');
    
    const calendarStructure = await page.evaluate(() => {
      const dayHeaders = document.querySelectorAll('.grid-cols-7 .text-xs, .grid-cols-7 .text-sm');
      const calendarDays = document.querySelectorAll('.grid-cols-7 > div > div');
      const has7Columns = document.querySelector('.grid-cols-7');
      
      return {
        hasDayHeaders: dayHeaders.length >= 7,
        hasCalendarDays: calendarDays.length > 0,
        has7Columns: !!has7Columns
      };
    });
    
    if (calendarStructure.hasDayHeaders && calendarStructure.hasCalendarDays && calendarStructure.has7Columns) {
      console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞—Ç–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ –µ –ø—Ä–∞–≤–∏–ª–Ω–∞');
    } else {
      console.log('‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞—Ç–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞ –Ω–µ –µ –ø—Ä–∞–≤–∏–ª–Ω–∞');
    }
    
    // 13. –¢–ï–°–¢ 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ hover –µ—Ñ–µ–∫—Ç–∏ –∏ —Å–∫—Ä–∏—Ç–∏ –±—É—Ç–æ–Ω–∏
    console.log('\nüß™ –¢–ï–°–¢ 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ hover –µ—Ñ–µ–∫—Ç–∏ –∏ —Å–∫—Ä–∏—Ç–∏ –±—É—Ç–æ–Ω–∏');
    
    // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –∏–º–∞ —Å–∫—Ä–∏—Ç–∏ –±—É—Ç–æ–Ω–∏ –∫–æ–∏—Ç–æ —Å–µ –ø–æ—è–≤—è–≤–∞—Ç –ø—Ä–∏ hover
    const hasHiddenButtons = await page.evaluate(() => {
      const calendarCells = document.querySelectorAll('.cursor-pointer');
      let foundHiddenButtons = 0;
      
      calendarCells.forEach(cell => {
        // –ü—Ä–æ–≤–µ—Ä–∏ –∑–∞ –±—É—Ç–æ–Ω–∏ —Å opacity-0 –∏–ª–∏ —Å–∫—Ä–∏—Ç–∏ –∫–ª–∞—Å–æ–≤–µ
        const hiddenButtons = cell.querySelectorAll('button[class*="opacity-0"], button[class*="hidden"], button[class*="invisible"]');
        foundHiddenButtons += hiddenButtons.length;
      });
      
      return foundHiddenButtons > 0;
    });
    
    if (hasHiddenButtons) {
      console.log('‚úÖ –ò–º–∞ —Å–∫—Ä–∏—Ç–∏ –±—É—Ç–æ–Ω–∏ –∫–æ–∏—Ç–æ —Å–µ –ø–æ—è–≤—è–≤–∞—Ç –ø—Ä–∏ hover');
    } else {
      console.log('üìã –ù—è–º–∞ —Å–∫—Ä–∏—Ç–∏ –±—É—Ç–æ–Ω–∏');
    }
    
    console.log('\nüéâ –ü—ä–ª–µ–Ω —Ç–µ—Å—Ç—ä—Ç –∑–∞ –ö–∞–ª–µ–Ω–¥–∞—Ä –∑–∞–≤—ä—Ä—à–∏!');
    
  } catch (error) {
    console.error('üí• –ì—Ä–µ—à–∫–∞:', error.message);
  } finally {
    await browser.close();
  }
}

testCalendar(); 