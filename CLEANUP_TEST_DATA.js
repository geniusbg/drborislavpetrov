// üßπ –°–∫—Ä–∏–ø—Ç –∑–∞ –ø–æ—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–∏ –¥–∞–Ω–Ω–∏
const { Pool } = require('pg');

async function cleanupTestData() {
  console.log('üßπ –ó–∞–ø–æ—á–≤–∞–º –ø–æ—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–∏ –¥–∞–Ω–Ω–∏...');
  
  const pool = new Pool({
    host: 'localhost',
    port: 5432,
    database: 'drborislavpetrov',
    user: 'postgres',
    password: 'postgres'
  });
  
  try {
    const client = await pool.connect();
    
    // 1. –ò–∑—Ç—Ä–∏–π —Ç–µ—Å—Ç–æ–≤–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
    console.log('üìã –ò–∑—Ç—Ä–∏–≤–∞–º —Ç–µ—Å—Ç–æ–≤–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏...');
    const deleteUsersResult = await client.query(`
      DELETE FROM users 
      WHERE name LIKE '%Test%' 
         OR name LIKE '%Auto Refresh%' 
         OR name LIKE '%History%' 
         OR name LIKE '%Calendar%'
    `);
    console.log(`‚úÖ –ò–∑—Ç—Ä–∏—Ç–∏ ${deleteUsersResult.rowCount} —Ç–µ—Å—Ç–æ–≤–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏`);
    
    // 2. –ò–∑—Ç—Ä–∏–π —Ç–µ—Å—Ç–æ–≤–∏ —É—Å–ª—É–≥–∏
    console.log('üìã –ò–∑—Ç—Ä–∏–≤–∞–º —Ç–µ—Å—Ç–æ–≤–∏ —É—Å–ª—É–≥–∏...');
    const deleteServicesResult = await client.query(`
      DELETE FROM services 
      WHERE name LIKE '%Test%' 
         OR name LIKE '%Auto Refresh%' 
         OR name LIKE '%Calendar%'
    `);
    console.log(`‚úÖ –ò–∑—Ç—Ä–∏—Ç–∏ ${deleteServicesResult.rowCount} —Ç–µ—Å—Ç–æ–≤–∏ —É—Å–ª—É–≥–∏`);
    
    // 3. –ò–∑—Ç—Ä–∏–π —Ç–µ—Å—Ç–æ–≤–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
    console.log('üìã –ò–∑—Ç—Ä–∏–≤–∞–º —Ç–µ—Å—Ç–æ–≤–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏...');
    const deleteBookingsResult = await client.query(`
      DELETE FROM bookings 
      WHERE name LIKE '%Test%' 
         OR name LIKE '%Auto Refresh%' 
         OR name LIKE '%History%' 
         OR name LIKE '%Calendar%'
         OR email LIKE '%test%'
    `);
    console.log(`‚úÖ –ò–∑—Ç—Ä–∏—Ç–∏ ${deleteBookingsResult.rowCount} —Ç–µ—Å—Ç–æ–≤–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏`);
    
    // 4. –ò–∑—Ç—Ä–∏–π —Ç–µ—Å—Ç–æ–≤–∏ bug reports
    console.log('üìã –ò–∑—Ç—Ä–∏–≤–∞–º —Ç–µ—Å—Ç–æ–≤–∏ bug reports...');
    const deleteBugReportsResult = await client.query(`
      DELETE FROM bug_reports 
      WHERE title LIKE '%Test%' 
         OR description LIKE '%Test%'
         OR reporter_name LIKE '%Test%'
    `);
    console.log(`‚úÖ –ò–∑—Ç—Ä–∏—Ç–∏ ${deleteBugReportsResult.rowCount} —Ç–µ—Å—Ç–æ–≤–∏ bug reports`);
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∏ –æ—Å—Ç–∞–≤–∞—â–∏ –¥–∞–Ω–Ω–∏
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º –æ—Å—Ç–∞–≤–∞—â–∏ –¥–∞–Ω–Ω–∏...');
    
    const usersCount = await client.query('SELECT COUNT(*) FROM users');
    const servicesCount = await client.query('SELECT COUNT(*) FROM services');
    const bookingsCount = await client.query('SELECT COUNT(*) FROM bookings');
    const bugReportsCount = await client.query('SELECT COUNT(*) FROM bug_reports');
    
    console.log('üìä –û—Å—Ç–∞–≤–∞—â–∏ –¥–∞–Ω–Ω–∏:');
    console.log(`   - –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏: ${usersCount.rows[0].count}`);
    console.log(`   - –£—Å–ª—É–≥–∏: ${servicesCount.rows[0].count}`);
    console.log(`   - –†–µ–∑–µ—Ä–≤–∞—Ü–∏–∏: ${bookingsCount.rows[0].count}`);
    console.log(`   - Bug Reports: ${bugReportsCount.rows[0].count}`);
    
    client.release();
    console.log('‚úÖ –ü–æ—á–∏—Å—Ç–≤–∞–Ω–µ—Ç–æ –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('üí• –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ—á–∏—Å—Ç–≤–∞–Ω–µ:', error.message);
  } finally {
    await pool.end();
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏ —Ç–µ—Å—Ç–æ–≤–∏ –¥–∞–Ω–Ω–∏
async function cleanupSpecificTestData(testName) {
  console.log(`üßπ –ü–æ—á–∏—Å—Ç–≤–∞–º –¥–∞–Ω–Ω–∏ –∑–∞ —Ç–µ—Å—Ç: ${testName}...`);
  
  const pool = new Pool({
    host: 'localhost',
    port: 5432,
    database: 'drborislavpetrov',
    user: 'postgres',
    password: 'postgres'
  });
  
  try {
    const client = await pool.connect();
    
    switch (testName) {
      case 'auto-refresh':
        // –ò–∑—Ç—Ä–∏–π –¥–∞–Ω–Ω–∏ –æ—Ç auto refresh —Ç–µ—Å—Ç–∞
        await client.query(`
          DELETE FROM users WHERE name LIKE '%Auto Refresh%'
        `);
        await client.query(`
          DELETE FROM services WHERE name LIKE '%Auto Refresh%'
        `);
        console.log('‚úÖ –ò–∑—á–∏—Å—Ç–µ–Ω–∏ auto-refresh —Ç–µ—Å—Ç–æ–≤–∏ –¥–∞–Ω–Ω–∏');
        break;
        
      case 'history':
        // –ò–∑—Ç—Ä–∏–π –¥–∞–Ω–Ω–∏ –æ—Ç history —Ç–µ—Å—Ç–∞
        await client.query(`
          DELETE FROM users WHERE name LIKE '%History%'
        `);
        await client.query(`
          DELETE FROM bookings WHERE name LIKE '%History%'
        `);
        console.log('‚úÖ –ò–∑—á–∏—Å—Ç–µ–Ω–∏ history —Ç–µ—Å—Ç–æ–≤–∏ –¥–∞–Ω–Ω–∏');
        break;
        
      case 'calendar':
        // –ò–∑—Ç—Ä–∏–π –¥–∞–Ω–Ω–∏ –æ—Ç calendar —Ç–µ—Å—Ç–∞
        await client.query(`
          DELETE FROM users WHERE name LIKE '%Calendar%'
        `);
        await client.query(`
          DELETE FROM bookings WHERE name LIKE '%Calendar%'
        `);
        console.log('‚úÖ –ò–∑—á–∏—Å—Ç–µ–Ω–∏ calendar —Ç–µ—Å—Ç–æ–≤–∏ –¥–∞–Ω–Ω–∏');
        break;
        
      default:
        console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω —Ç–µ—Å—Ç:', testName);
    }
    
    client.release();
    
  } catch (error) {
    console.error('üí• –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ—á–∏—Å—Ç–≤–∞–Ω–µ:', error.message);
  } finally {
    await pool.end();
  }
}

// –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ —Å–µ –∏–∑–≤–∏–∫–≤–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç
const testName = process.argv[2];
if (testName) {
  cleanupSpecificTestData(testName);
} else {
  cleanupTestData();
} 