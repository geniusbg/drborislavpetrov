// üß™ –¢–µ—Å—Ç –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
const puppeteer = require('puppeteer');

async function testAutoRefresh() {
  console.log('üéØ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ...');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    slowMo: 100 
  });
  
  const page = await browser.newPage();
  await page.setViewport({ width: 1920, height: 1080 });
  
  // –û–±—Ä–∞–±–æ—Ç–≤–∞–π alert –¥–∏–∞–ª–æ–∑–∏—Ç–µ
  page.on('dialog', dialog => {
    console.log('üìã Alert –¥–∏–∞–ª–æ–≥:', dialog.message());
    dialog.accept();
  });
  
  // –û–±—Ä–∞–±–æ—Ç–≤–∞–π console –ª–æ–≥–æ–≤–µ –æ—Ç –±—Ä–∞—É–∑—ä—Ä–∞
  page.on('console', msg => {
    console.log('üìã Browser console:', msg.text());
  });
  
  try {
    // 1. Login
    console.log('üìã Login...');
    await page.goto('http://localhost:3000/admin/login');
    await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    await page.type('input[name="username"]', 'admin');
    await page.type('input[name="password"]', 'admin123');
    await page.click('button[type="submit"]');
    await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    // 2. –ó–∞–ø–æ–º–Ω–∏ –Ω–∞—á–∞–ª–Ω–æ—Ç–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Å–µ–∫—Ü–∏–∏
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º –Ω–∞—á–∞–ª–Ω–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ...');
    
    // –†–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
    const initialBookings = await page.evaluate(() => {
      const table = document.querySelector('table');
      if (!table) return 0;
      const rows = table.querySelectorAll('tbody tr');
      return rows.length;
    });
    console.log('üìã –ù–∞—á–∞–ª–Ω–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏:', initialBookings);
    
    // –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const usersBtn = buttons.find(btn => btn.textContent.trim() === '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏');
      if (usersBtn) usersBtn.click();
    });
    await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    const initialUsers = await page.evaluate(() => {
      const table = document.querySelector('table');
      if (!table) return 0;
      const rows = table.querySelectorAll('tbody tr');
      return rows.length;
    });
    console.log('üìã –ù–∞—á–∞–ª–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏:', initialUsers);
    
    // –£—Å–ª—É–≥–∏
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const servicesBtn = buttons.find(btn => btn.textContent.trim() === '–£—Å–ª—É–≥–∏');
      if (servicesBtn) servicesBtn.click();
    });
    await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    const initialServices = await page.evaluate(() => {
      const table = document.querySelector('table');
      if (!table) return 0;
      const rows = table.querySelectorAll('tbody tr');
      return rows.length;
    });
    console.log('üìã –ù–∞—á–∞–ª–Ω–∏ —É—Å–ª—É–≥–∏:', initialServices);
    
    // 3. –û—Ç–≤–æ—Ä–∏ –Ω–æ–≤ —Ç–∞–± –∏ –Ω–∞–ø—Ä–∞–≤–∏ –ø—Ä–æ–º–µ–Ω–∏
    console.log('üìã –û—Ç–≤–∞—Ä—è–º –Ω–æ–≤ —Ç–∞–± –∑–∞ –ø—Ä–æ–º–µ–Ω–∏...');
    const newPage = await browser.newPage();
    await newPage.goto('http://localhost:3000/admin/login');
    await (page.waitForTimeout ? newPage.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    await newPage.type('input[name="username"]', 'admin');
    await newPage.type('input[name="password"]', 'admin123');
    await newPage.click('button[type="submit"]');
    await (page.waitForTimeout ? newPage.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    // 4. –î–æ–±–∞–≤–∏ –Ω–æ–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –≤ –Ω–æ–≤–∏—è —Ç–∞–±
    console.log('üìã –î–æ–±–∞–≤—è–º –Ω–æ–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª...');
    await newPage.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const usersBtn = buttons.find(btn => btn.textContent.trim() === '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏');
      if (usersBtn) usersBtn.click();
    });
    await (page.waitForTimeout ? newPage.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    await newPage.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const addUserBtn = buttons.find(btn => btn.textContent.trim() === '–î–æ–±–∞–≤–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª');
      if (addUserBtn) addUserBtn.click();
    });
    await (page.waitForTimeout ? newPage.waitForTimeout(1000) : new Promise(resolve => setTimeout(resolve, 1000)));
    
    const uniquePhone = `+359888${Date.now()}`;
    await newPage.type('input[name="name"]', 'Auto Refresh Test User');
    await newPage.type('input[name="phone"]', uniquePhone);
    await newPage.click('button[type="submit"]');
    await (page.waitForTimeout ? newPage.waitForTimeout(3000) : new Promise(resolve => setTimeout(resolve, 3000)));
    
    // 5. –î–æ–±–∞–≤–∏ –Ω–æ–≤–∞ —É—Å–ª—É–≥–∞ –≤ –Ω–æ–≤–∏—è —Ç–∞–±
    console.log('üìã –î–æ–±–∞–≤—è–º –Ω–æ–≤–∞ —É—Å–ª—É–≥–∞...');
    await newPage.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const servicesBtn = buttons.find(btn => btn.textContent.trim() === '–£—Å–ª—É–≥–∏');
      if (servicesBtn) servicesBtn.click();
    });
    await (page.waitForTimeout ? newPage.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    // Debug: –ø—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ —Å–º–µ –≤ —Å–µ–∫—Ü–∏—è –£—Å–ª—É–≥–∏
    const currentSection = await newPage.evaluate(() => {
      const activeTab = document.querySelector('.bg-blue-600');
      return activeTab ? activeTab.textContent : 'No active tab';
    });
    console.log('üìã –¢–µ–∫—É—â–∞ —Å–µ–∫—Ü–∏—è –≤ –Ω–æ–≤–∏—è —Ç–∞–±:', currentSection);
    
    // Debug: –ø—Ä–æ–≤–µ—Ä–∏ –≤—Å–∏—á–∫–∏ –±—É—Ç–æ–Ω–∏
    const allButtons = await newPage.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      return buttons.map(btn => btn.textContent.trim()).filter(text => text);
    });
    console.log('üìã –ù–∞–ª–∏—á–Ω–∏ –±—É—Ç–æ–Ω–∏ –≤ –Ω–æ–≤–∏—è —Ç–∞–±:', allButtons);
    
    await newPage.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const addServiceBtn = buttons.find(btn => btn.textContent.trim() === '–î–æ–±–∞–≤–∏ —É—Å–ª—É–≥–∞') ||
                           buttons.find(btn => btn.textContent.trim() === '–î–æ–±–∞–≤–∏');
      if (addServiceBtn) {
        console.log('Found add service button, clicking...');
        addServiceBtn.click();
      } else {
        console.log('Add service button not found');
      }
    });
    await (page.waitForTimeout ? newPage.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    // Debug: –ø—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ —Å–µ –æ—Ç–≤–æ—Ä–∏ –º–æ–¥–∞–ª
    const { modalOpened, modalInputs } = await newPage.evaluate(() => {
      const modal = document.querySelector('form') || document.querySelector('.modal');
      let inputs = [];
      if (modal) {
        inputs = Array.from(modal.querySelectorAll('input, textarea, select')).map(el => ({
          tag: el.tagName,
          name: el.getAttribute('name'),
          type: el.getAttribute('type'),
          value: el.value
        }));
      }
      return { modalOpened: !!modal, modalInputs: inputs };
    });
    console.log('üìã –ú–æ–¥–∞–ª—ä—Ç –∑–∞ —É—Å–ª—É–≥–∞ —Å–µ –æ—Ç–≤–æ—Ä–∏:', modalOpened);
    console.log('üìã Input –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ –º–æ–¥–∞–ª–∞:', modalInputs);
    
    // –ü–æ–ø—ä–ª–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –±—ä—Ä–∑–æ –±–µ–∑ –∏–∑—á–∞–∫–≤–∞–Ω–µ –º–µ–∂–¥—É –ø–æ–ª–µ—Ç–∞—Ç–∞
    try {
      await newPage.type('input[name="name"]', 'Auto Refresh Test Service');
      await newPage.type('input[name="duration"]', '60');
      await newPage.type('input[name="price"]', '50');
      await newPage.click('button[type="submit"]');
      console.log('‚úÖ –ü–æ–ø—ä–ª–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞ –±—ä—Ä–∑–æ');
    } catch (error) {
      console.log('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–ø—ä–ª–≤–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞:', error.message);
    }
    await newPage.click('button[type="submit"]');
    await (page.waitForTimeout ? newPage.waitForTimeout(3000) : new Promise(resolve => setTimeout(resolve, 3000)));
    
    // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –º–æ–¥–∞–ª—ä—Ç —Å–µ –∑–∞—Ç–≤–æ—Ä–∏ (—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤—è–Ω–µ)
    const modalClosed = await newPage.evaluate(() => {
      const modal = document.querySelector('form') || document.querySelector('.modal');
      return !modal;
    });
    console.log('üìã –ú–æ–¥–∞–ª—ä—Ç –∑–∞ —É—Å–ª—É–≥–∞ —Å–µ –∑–∞—Ç–≤–æ—Ä–∏ —Å–ª–µ–¥ –¥–æ–±–∞–≤—è–Ω–µ:', modalClosed);
    
    // 6. –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –ø—ä—Ä–≤–∏—è—Ç —Ç–∞–± —Å–µ –æ–±–Ω–æ–≤–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –≤ –ø—ä—Ä–≤–∏—è —Ç–∞–±...');
    await (page.waitForTimeout ? page.waitForTimeout(5000) : new Promise(resolve => setTimeout(resolve, 5000)));
    
    // –ü—Ä–æ–≤–µ—Ä–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const usersBtn = buttons.find(btn => btn.textContent.trim() === '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏');
      if (usersBtn) usersBtn.click();
    });
    await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    const updatedUsers = await page.evaluate(() => {
      const table = document.querySelector('table');
      if (!table) return 0;
      const rows = table.querySelectorAll('tbody tr');
      return rows.length;
    });
    console.log('üìã –û–±–Ω–æ–≤–µ–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏:', updatedUsers);
    
    if (updatedUsers > initialUsers) {
      console.log('‚úÖ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ —Å–µ –æ–±–Ω–æ–≤–∏—Ö–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ!');
    } else {
      console.log('‚ùå –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ –Ω–µ —Å–µ –æ–±–Ω–æ–≤–∏—Ö–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏ —É—Å–ª—É–≥–∏
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const servicesBtn = buttons.find(btn => btn.textContent.trim() === '–£—Å–ª—É–≥–∏');
      if (servicesBtn) servicesBtn.click();
    });
    await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    const updatedServices = await page.evaluate(() => {
      const table = document.querySelector('table');
      if (!table) return 0;
      const rows = table.querySelectorAll('tbody tr');
      return rows.length;
    });
    console.log('üìã –û–±–Ω–æ–≤–µ–Ω–∏ —É—Å–ª—É–≥–∏:', updatedServices);
    
    if (updatedServices > initialServices) {
      console.log('‚úÖ –£—Å–ª—É–≥–∏—Ç–µ —Å–µ –æ–±–Ω–æ–≤–∏—Ö–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ!');
    } else {
      console.log('‚ùå –£—Å–ª—É–≥–∏—Ç–µ –Ω–µ —Å–µ –æ–±–Ω–æ–≤–∏—Ö–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ');
    }
    
    // 7. –ü—Ä–æ–≤–µ—Ä–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ (–≤—ä—Ä–Ω–∏ —Å–µ –≤ –ø—ä—Ä–≤–∞—Ç–∞ —Å–µ–∫—Ü–∏—è)
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const bookingsBtn = buttons.find(btn => btn.textContent.trim() === '–†–µ–∑–µ—Ä–≤–∞—Ü–∏–∏');
      if (bookingsBtn) bookingsBtn.click();
    });
    await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    const updatedBookings = await page.evaluate(() => {
      const table = document.querySelector('table');
      if (!table) return 0;
      const rows = table.querySelectorAll('tbody tr');
      return rows.length;
    });
    console.log('üìã –û–±–Ω–æ–≤–µ–Ω–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏:', updatedBookings);
    
    console.log('\nüéâ –¢–µ—Å—Ç—ä—Ç –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –∑–∞–≤—ä—Ä—à–∏!');
    
    // –ó–∞—Ç–≤–æ—Ä–∏ –Ω–æ–≤–∏—è —Ç–∞–±
    await newPage.close();
    
  } catch (error) {
    console.error('üí• –ì—Ä–µ—à–∫–∞:', error.message);
  } finally {
    await browser.close();
  }
}

testAutoRefresh(); 