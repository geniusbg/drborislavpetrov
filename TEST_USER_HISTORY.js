// üß™ –¢–µ—Å—Ç –∑–∞ –∏—Å—Ç–æ—Ä–∏—è—Ç–∞ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏—Ç–µ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
const puppeteer = require('puppeteer');

async function testUserHistory() {
  console.log('üéØ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—è—Ç–∞ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏—Ç–µ...');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    slowMo: 100 
  });
  
  const page = await browser.newPage();
  await page.setViewport({ width: 1920, height: 1080 });
  
  // –û–±—Ä–∞–±–æ—Ç–≤–∞–π alert –¥–∏–∞–ª–æ–∑–∏—Ç–µ
  page.on('dialog', dialog => {
    console.log('üìã Alert –¥–∏–∞–ª–æ–≥:', dialog.message());
    dialog.accept();
  });
  
  // –û–±—Ä–∞–±–æ—Ç–≤–∞–π console –ª–æ–≥–æ–≤–µ –æ—Ç –±—Ä–∞—É–∑—ä—Ä–∞
  page.on('console', msg => {
    console.log('üìã Browser console:', msg.text());
  });
  
  try {
    // 1. Login
    console.log('üìã Login...');
    await page.goto('http://localhost:3000/admin/login');
    await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    await page.type('input[name="username"]', 'admin');
    await page.type('input[name="password"]', 'admin123');
    await page.click('button[type="submit"]');
    await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    // 2. –û—Ç–∏–¥–∏ –≤ —Å–µ–∫—Ü–∏—è –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
    console.log('üìã –û—Ç–∏–≤–∞–º –≤ —Å–µ–∫—Ü–∏—è –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏...');
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const usersBtn = buttons.find(btn => btn.textContent.trim() === '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏');
      if (usersBtn) usersBtn.click();
    });
    await (page.waitForTimeout ? page.waitForTimeout(3000) : new Promise(resolve => setTimeout(resolve, 3000)));
    
    // 3. –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
    console.log('\nüß™ –¢–ï–°–¢ 1: –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏');
    
    // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –∏–º–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
    const usersCount = await page.evaluate(() => {
      const table = document.querySelector('table');
      if (!table) return 0;
      const rows = table.querySelectorAll('tbody tr');
      return rows.length;
    });
    
    console.log('üìã –ë—Ä–æ–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏:', usersCount);
    
    if (usersCount > 0) {
      // –ö–ª–∏–∫–Ω–∏ –≤—ä—Ä—Ö—É –∏–∫–æ–Ω–∞—Ç–∞ –∑–∞ –∏—Å—Ç–æ—Ä–∏—è –Ω–∞ –ù–∏–∫–æ–ª–∞–π –ü–µ—Ç—Ä–æ–≤
      await page.evaluate(() => {
        const table = document.querySelector('table');
        if (table) {
          const rows = Array.from(table.querySelectorAll('tbody tr'));
          const nikolayRow = rows.find(row => {
            const nameCell = row.querySelector('td');
            return nameCell && nameCell.textContent.includes('–ù–∏–∫–æ–ª–∞–π –ü–µ—Ç—Ä–æ–≤');
          });
          
          if (nikolayRow) {
            const historyBtn = nikolayRow.querySelector('button[title="–ò—Å—Ç–æ—Ä–∏—è –Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏—Ç–µ"]') ||
                              nikolayRow.querySelector('button[title*="–ò—Å—Ç–æ—Ä–∏—è"]') ||
                              nikolayRow.querySelector('button[aria-label*="–ò—Å—Ç–æ—Ä–∏—è"]') ||
                              nikolayRow.querySelector('svg[data-icon="history"]')?.closest('button') ||
                              nikolayRow.querySelector('button:has(svg)');
            if (historyBtn) {
              console.log('Clicking history button for –ù–∏–∫–æ–ª–∞–π –ü–µ—Ç—Ä–æ–≤...');
              console.log('Button title:', historyBtn.title);
              console.log('Button onclick:', historyBtn.onclick);
              historyBtn.click();
            } else {
              console.log('History button not found for –ù–∏–∫–æ–ª–∞–π –ü–µ—Ç—Ä–æ–≤');
            }
          } else {
            console.log('–ù–∏–∫–æ–ª–∞–π –ü–µ—Ç—Ä–æ–≤ not found in table');
          }
        }
      });
      await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
      
      // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ —Å–µ –æ—Ç–≤–æ—Ä–∏ –º–æ–¥–∞–ª –∏–ª–∏ –ø–∞–Ω–µ–ª
      const historyModal = await page.evaluate(() => {
        const modal = document.querySelector('.modal') || 
                     document.querySelector('[role="dialog"]') ||
                     document.querySelector('.history-panel') ||
                     document.querySelector('.bg-white.rounded-lg.shadow-xl') ||
                     document.querySelector('.bg-white.border.rounded-lg');
        return !!modal;
      });
      
      if (historyModal) {
        console.log('‚úÖ –ú–æ–¥–∞–ª—ä—Ç –∑–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–µ –æ—Ç–≤–æ—Ä–∏');
        
        // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –∏–º–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
        const hasBookings = await page.evaluate(() => {
          const bookings = document.querySelectorAll('.booking-item') ||
                          document.querySelectorAll('tr') ||
                          document.querySelectorAll('.bg-gray-50');
          return bookings.length > 0;
        });
        
        if (hasBookings) {
          console.log('‚úÖ –ò–º–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—è—Ç–∞');
        } else {
          console.log('üìã –ù—è–º–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—è—Ç–∞ - –ø–æ–∫–∞–∑–≤–∞ —Å–µ –ø—Ä–∞–∑–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ');
          
          // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –∏–º–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ "–ù—è–º–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏"
          const noBookingsMessage = await page.evaluate(() => {
            const message = document.querySelector('.text-gray-500') ||
                          document.querySelector('.text-center') ||
                          document.querySelector('p');
            return message ? message.textContent.includes('–ù—è–º–∞') || message.textContent.includes('No') : false;
          });
          
          if (noBookingsMessage) {
            console.log('‚úÖ –ü–æ–∫–∞–∑–≤–∞ —Å–µ –ø—Ä–∞–≤–∏–ª–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ –∑–∞ –ª–∏–ø—Å–∞ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏');
          } else {
            console.log('‚ùå –ù–µ —Å–µ –ø–æ–∫–∞–∑–≤–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ –∑–∞ –ª–∏–ø—Å–∞ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏');
          }
        }
        
        // –ó–∞—Ç–≤–æ—Ä–∏ –º–æ–¥–∞–ª–∞
        await page.evaluate(() => {
          const closeBtn = document.querySelector('button svg[data-icon="x"]')?.closest('button') ||
                          document.querySelector('button:has(svg)') ||
                          document.querySelector('.close-btn') ||
                          document.querySelector('button[aria-label="Close"]');
          if (closeBtn) closeBtn.click();
        });
        await (page.waitForTimeout ? page.waitForTimeout(1000) : new Promise(resolve => setTimeout(resolve, 1000)));
      } else {
        console.log('‚ùå –ú–æ–¥–∞–ª—ä—Ç –∑–∞ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ —Å–µ –æ—Ç–≤–æ—Ä–∏');
      }
    } else {
      console.log('üìã –ù—è–º–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ');
    }
    
    // 4. –¢–ï–°–¢ 2: –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
    console.log('\nüß™ –¢–ï–°–¢ 2: –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏');
    
    // –î–æ–±–∞–≤–∏ –Ω–æ–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const addUserBtn = buttons.find(btn => btn.textContent.trim() === '–î–æ–±–∞–≤–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª');
      if (addUserBtn) addUserBtn.click();
    });
    await (page.waitForTimeout ? page.waitForTimeout(1000) : new Promise(resolve => setTimeout(resolve, 1000)));
    
    const uniquePhone = `+359888${Date.now()}`;
    await page.type('input[name="name"]', 'History Test User');
    await page.type('input[name="phone"]', uniquePhone);
    await page.type('input[name="email"]', 'history@test.com');
    await page.click('button[type="submit"]');
    await (page.waitForTimeout ? page.waitForTimeout(3000) : new Promise(resolve => setTimeout(resolve, 3000)));
    
    // –û—Ç–∏–¥–∏ –≤ —Å–µ–∫—Ü–∏—è –†–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è –∑–∞ —Ç–æ–∑–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const bookingsBtn = buttons.find(btn => btn.textContent.trim() === '–†–µ–∑–µ—Ä–≤–∞—Ü–∏–∏');
      if (bookingsBtn) bookingsBtn.click();
    });
    await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    // –î–æ–±–∞–≤–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const addBookingBtn = buttons.find(btn => btn.textContent.trim() === '–î–æ–±–∞–≤–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è');
      if (addBookingBtn) addBookingBtn.click();
    });
    await (page.waitForTimeout ? page.waitForTimeout(1000) : new Promise(resolve => setTimeout(resolve, 1000)));
    
    await page.type('input[name="name"]', 'History Test User');
    await page.type('input[name="phone"]', uniquePhone);
    await page.type('input[name="email"]', 'history@test.com');
    
    // –ò–∑—á–∞–∫–∞–π —É—Å–ª—É–≥–∏—Ç–µ –¥–∞ —Å–µ –∑–∞—Ä–µ–¥—è—Ç
    await page.waitForFunction(() => {
      const serviceSelect = document.querySelector('select[name="service"]');
      return serviceSelect && serviceSelect.options.length > 1;
    }, { timeout: 10000 });
    
    // –ò–∑–±–µ—Ä–∏ —É—Å–ª—É–≥–∞
    await page.evaluate(() => {
      const serviceSelect = document.querySelector('select[name="service"]');
      console.log('Service select found:', !!serviceSelect);
      if (serviceSelect) {
        console.log('Service options count:', serviceSelect.options.length);
        if (serviceSelect.options.length > 1) { // Skip the first "–ò–∑–±–µ—Ä–µ—Ç–µ —É—Å–ª—É–≥–∞" option
          serviceSelect.value = serviceSelect.options[1].value;
          serviceSelect.dispatchEvent(new Event('change'));
          console.log('Selected service:', serviceSelect.options[1].text);
        } else {
          console.log('No service options available');
        }
      } else {
        console.log('Service select not found');
      }
    });
    
    // –ò–∑–±–µ—Ä–∏ –¥–∞—Ç–∞ (—É—Ç—Ä–µ)
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowStr = tomorrow.toISOString().split('T')[0];
    await page.type('input[name="date"]', tomorrowStr);
    
    // –ò–∑–±–µ—Ä–∏ —á–∞—Å
    await page.evaluate(() => {
      const timeSelect = document.querySelector('select[name="time"]');
      if (timeSelect && timeSelect.options.length > 0) {
        timeSelect.value = timeSelect.options[0].value;
        timeSelect.dispatchEvent(new Event('change'));
      }
    });
    
    await page.click('button[type="submit"]');
    await (page.waitForTimeout ? page.waitForTimeout(3000) : new Promise(resolve => setTimeout(resolve, 3000)));
    
    // 5. –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—è—Ç–∞ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
    console.log('\nüß™ –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—è—Ç–∞ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª —Å —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏');
    
    // –í—ä—Ä–Ω–∏ —Å–µ –≤ —Å–µ–∫—Ü–∏—è –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const usersBtn = buttons.find(btn => btn.textContent.trim() === '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏');
      if (usersBtn) usersBtn.click();
    });
    await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    // –ù–∞–º–µ—Ä–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –∏ –∫–ª–∏–∫–Ω–∏ –≤—ä—Ä—Ö—É –∏—Å—Ç–æ—Ä–∏—è—Ç–∞
    await page.evaluate(() => {
      const table = document.querySelector('table');
      if (table) {
        const rows = Array.from(table.querySelectorAll('tbody tr'));
        const targetRow = rows.find(row => {
          const nameCell = row.querySelector('td');
          return nameCell && nameCell.textContent.includes('History Test User');
        });
        
        if (targetRow) {
          const historyBtn = targetRow.querySelector('button[title="–ò—Å—Ç–æ—Ä–∏—è –Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏—Ç–µ"]') ||
                            targetRow.querySelector('button[title*="–ò—Å—Ç–æ—Ä–∏—è"]') ||
                            targetRow.querySelector('button[aria-label*="–ò—Å—Ç–æ—Ä–∏—è"]') ||
                            targetRow.querySelector('svg[data-icon="history"]')?.closest('button') ||
                            targetRow.querySelector('button:has(svg)');
          if (historyBtn) {
            console.log('Clicking history button for user with bookings...');
            historyBtn.click();
          }
        }
      }
    });
    await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ —Å–µ –æ—Ç–≤–æ—Ä–∏ –º–æ–¥–∞–ª –∏ –∏–º–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
    const historyModalWithBookings = await page.evaluate(() => {
      const modal = document.querySelector('.modal') || 
                   document.querySelector('[role="dialog"]') ||
                   document.querySelector('.history-panel') ||
                   document.querySelector('.bg-white.border.rounded-lg');
      return !!modal;
    });
    
    if (historyModalWithBookings) {
      console.log('‚úÖ –ú–æ–¥–∞–ª—ä—Ç –∑–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–µ –æ—Ç–≤–æ—Ä–∏');
      
      const hasBookingsInHistory = await page.evaluate(() => {
        const bookings = document.querySelectorAll('.booking-item') ||
                        document.querySelectorAll('tr') ||
                        document.querySelectorAll('.bg-gray-50');
        return bookings.length > 0;
      });
      
      if (hasBookingsInHistory) {
        console.log('‚úÖ –ò–º–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—è—Ç–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è');
      } else {
        console.log('‚ùå –ù—è–º–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—è—Ç–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è');
      }
      
      // –ó–∞—Ç–≤–æ—Ä–∏ –º–æ–¥–∞–ª–∞
      await page.evaluate(() => {
        const closeBtn = document.querySelector('button:contains("√ó")') ||
                        document.querySelector('button:contains("–ó–∞—Ç–≤–æ—Ä–∏")') ||
                        document.querySelector('.close-btn') ||
                        document.querySelector('button[aria-label="Close"]');
        if (closeBtn) closeBtn.click();
      });
    } else {
      console.log('‚ùå –ú–æ–¥–∞–ª—ä—Ç –∑–∞ –∏—Å—Ç–æ—Ä–∏—è –Ω–µ —Å–µ –æ—Ç–≤–æ—Ä–∏');
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç—ä—Ç –∑–∞ –∏—Å—Ç–æ—Ä–∏—è—Ç–∞ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏—Ç–µ –∑–∞–≤—ä—Ä—à–∏!');
    
  } catch (error) {
    console.error('üí• –ì—Ä–µ—à–∫–∞:', error.message);
  } finally {
    await browser.close();
  }
}

testUserHistory(); 