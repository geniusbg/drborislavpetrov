"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/admin/voice-commands/route";
exports.ids = ["app/api/admin/voice-commands/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "sqlite3":
/*!**************************!*\
  !*** external "sqlite3" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("sqlite3");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fvoice-commands%2Froute&page=%2Fapi%2Fadmin%2Fvoice-commands%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fvoice-commands%2Froute.ts&appDir=C%3A%5CUsers%5Cgenius%5CDownloads%5Cdrborislavpetrov%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cgenius%5CDownloads%5Cdrborislavpetrov&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fvoice-commands%2Froute&page=%2Fapi%2Fadmin%2Fvoice-commands%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fvoice-commands%2Froute.ts&appDir=C%3A%5CUsers%5Cgenius%5CDownloads%5Cdrborislavpetrov%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cgenius%5CDownloads%5Cdrborislavpetrov&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_genius_Downloads_drborislavpetrov_src_app_api_admin_voice_commands_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/admin/voice-commands/route.ts */ \"(rsc)/./src/app/api/admin/voice-commands/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/admin/voice-commands/route\",\n        pathname: \"/api/admin/voice-commands\",\n        filename: \"route\",\n        bundlePath: \"app/api/admin/voice-commands/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\genius\\\\Downloads\\\\drborislavpetrov\\\\src\\\\app\\\\api\\\\admin\\\\voice-commands\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_genius_Downloads_drborislavpetrov_src_app_api_admin_voice_commands_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/admin/voice-commands/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhZG1pbiUyRnZvaWNlLWNvbW1hbmRzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhZG1pbiUyRnZvaWNlLWNvbW1hbmRzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYWRtaW4lMkZ2b2ljZS1jb21tYW5kcyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNnZW5pdXMlNUNEb3dubG9hZHMlNUNkcmJvcmlzbGF2cGV0cm92JTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNnZW5pdXMlNUNEb3dubG9hZHMlNUNkcmJvcmlzbGF2cGV0cm92JmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUM4QztBQUMzSDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2RyLWJvcmlzbGF2LXBldHJvdi13ZWJzaXRlLz83MDlkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXGdlbml1c1xcXFxEb3dubG9hZHNcXFxcZHJib3Jpc2xhdnBldHJvdlxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxhZG1pblxcXFx2b2ljZS1jb21tYW5kc1xcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYWRtaW4vdm9pY2UtY29tbWFuZHMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9hZG1pbi92b2ljZS1jb21tYW5kc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvYWRtaW4vdm9pY2UtY29tbWFuZHMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxnZW5pdXNcXFxcRG93bmxvYWRzXFxcXGRyYm9yaXNsYXZwZXRyb3ZcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcYWRtaW5cXFxcdm9pY2UtY29tbWFuZHNcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2FkbWluL3ZvaWNlLWNvbW1hbmRzL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fvoice-commands%2Froute&page=%2Fapi%2Fadmin%2Fvoice-commands%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fvoice-commands%2Froute.ts&appDir=C%3A%5CUsers%5Cgenius%5CDownloads%5Cdrborislavpetrov%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cgenius%5CDownloads%5Cdrborislavpetrov&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/admin/voice-commands/route.ts":
/*!***************************************************!*\
  !*** ./src/app/api/admin/voice-commands/route.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var sqlite3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sqlite3 */ \"sqlite3\");\n/* harmony import */ var sqlite3__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(sqlite3__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var sqlite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sqlite */ \"(rsc)/./node_modules/sqlite/build/index.mjs\");\n/* eslint-disable @typescript-eslint/no-explicit-any */ \n\n\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const command = body;\n        console.log(\"Received voice command:\", command);\n        if (!command.action) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: \"Невалидна команда\"\n            });\n        }\n        const db = await (0,sqlite__WEBPACK_IMPORTED_MODULE_2__.open)({\n            filename: \"bookings.db\",\n            driver: (sqlite3__WEBPACK_IMPORTED_MODULE_1___default().Database)\n        });\n        let result = {};\n        switch(command.action){\n            case \"addUser\":\n                result = await handleAddUser(db, command);\n                break;\n            case \"updateUser\":\n                result = await handleUpdateUser(db, command);\n                break;\n            case \"deleteUser\":\n                result = await handleDeleteUser(db, command);\n                break;\n            case \"addBooking\":\n                result = await handleAddBooking(db, command);\n                break;\n            case \"updateBooking\":\n                result = await handleUpdateBooking(db, command);\n                break;\n            case \"cancelBooking\":\n                result = await handleCancelBooking(db, command);\n                break;\n            case \"checkAvailability\":\n                result = await handleCheckAvailability(db, command);\n                break;\n            case \"showBookings\":\n                result = await handleShowBookings(db, command);\n                break;\n            default:\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: false,\n                    error: \"Неразпозната команда\"\n                });\n        }\n        await db.close();\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result);\n    } catch (error) {\n        console.error(\"Voice command error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Грешка при обработка на командата\"\n        });\n    }\n}\nasync function handleAddUser(db, command) {\n    const { name, phone, email } = command;\n    if (!name) {\n        return {\n            success: false,\n            error: \"Името е задължително\"\n        };\n    }\n    // Generate unique phone if not provided\n    let userPhone = phone;\n    if (!userPhone) {\n        const timestamp = Date.now();\n        userPhone = `0888${timestamp.toString().slice(-6)}`;\n    }\n    // Format phone number\n    userPhone = formatPhoneNumber(userPhone);\n    // Check if user already exists\n    const existingUser = await db.get(\"SELECT * FROM users WHERE phone = ?\", [\n        userPhone\n    ]);\n    if (existingUser) {\n        return {\n            success: false,\n            error: `Потребител с телефон ${userPhone} вече съществува`\n        };\n    }\n    // Capitalize name\n    const capitalizedName = capitalizeName(name);\n    await db.run(\"INSERT INTO users (name, phone, email) VALUES (?, ?, ?)\", [\n        capitalizedName,\n        userPhone,\n        email || null\n    ]);\n    return {\n        success: true,\n        message: `Потребителят ${capitalizedName} е добавен успешно с телефон ${userPhone}`\n    };\n}\nasync function handleUpdateUser(db, command) {\n    const { name, phone, email } = command;\n    if (!name) {\n        return {\n            success: false,\n            error: \"Името е задължително\"\n        };\n    }\n    // Find user by name (case insensitive)\n    const user = await db.get(\"SELECT * FROM users WHERE LOWER(name) = LOWER(?)\", [\n        name\n    ]);\n    if (!user) {\n        return {\n            success: false,\n            error: `Потребителят ${name} не е намерен`\n        };\n    }\n    const updateFields = [];\n    const updateValues = [];\n    if (phone) {\n        const formattedPhone = formatPhoneNumber(phone);\n        // Check if new phone already exists\n        const existingUser = await db.get(\"SELECT * FROM users WHERE phone = ? AND id != ?\", [\n            formattedPhone,\n            user.id\n        ]);\n        if (existingUser) {\n            return {\n                success: false,\n                error: `Телефон ${formattedPhone} вече се използва от друг потребител`\n            };\n        }\n        updateFields.push(\"phone = ?\");\n        updateValues.push(formattedPhone);\n        // Migrate bookings to new phone\n        await db.run(\"UPDATE bookings SET phone = ? WHERE phone = ?\", [\n            formattedPhone,\n            user.phone\n        ]);\n    }\n    if (email) {\n        updateFields.push(\"email = ?\");\n        updateValues.push(email);\n    }\n    if (updateFields.length === 0) {\n        return {\n            success: false,\n            error: \"Не са посочени данни за промяна\"\n        };\n    }\n    updateValues.push(user.id);\n    await db.run(`UPDATE users SET ${updateFields.join(\", \")} WHERE id = ?`, updateValues);\n    return {\n        success: true,\n        message: `Потребителят ${name} е обновен успешно`\n    };\n}\nasync function handleDeleteUser(db, command) {\n    const { name } = command;\n    if (!name) {\n        return {\n            success: false,\n            error: \"Името е задължително\"\n        };\n    }\n    // Find user by name (case insensitive)\n    const user = await db.get(\"SELECT * FROM users WHERE LOWER(name) = LOWER(?)\", [\n        name\n    ]);\n    if (!user) {\n        return {\n            success: false,\n            error: `Потребителят ${name} не е намерен`\n        };\n    }\n    // Check for future bookings\n    const futureBookings = await db.all('SELECT * FROM bookings WHERE phone = ? AND status IN (?, ?) AND date >= date(\"now\")', [\n        user.phone,\n        \"pending\",\n        \"confirmed\"\n    ]);\n    if (futureBookings.length > 0) {\n        return {\n            success: false,\n            error: `Не може да изтриете потребителят - има ${futureBookings.length} активни резервации`\n        };\n    }\n    // Check for historical data\n    const historicalData = await db.all(\"SELECT * FROM bookings WHERE phone = ?\", [\n        user.phone\n    ]);\n    if (historicalData.length > 0) {\n        return {\n            success: false,\n            error: `Потребителят има ${historicalData.length} исторически записи. Изисква се повторно потвърждение.`\n        };\n    }\n    await db.run(\"DELETE FROM users WHERE id = ?\", [\n        user.id\n    ]);\n    return {\n        success: true,\n        message: `Потребителят ${name} е изтрит успешно`\n    };\n}\nasync function handleAddBooking(db, command) {\n    const { name, date, time, service } = command;\n    if (!name || !date || !time) {\n        return {\n            success: false,\n            error: \"Името, датата и часът са задължителни\"\n        };\n    }\n    // Find or create user\n    let user = await db.get(\"SELECT * FROM users WHERE LOWER(name) = LOWER(?)\", [\n        name\n    ]);\n    if (!user) {\n        // Create user with default phone\n        const timestamp = Date.now();\n        const defaultPhone = `0888${timestamp.toString().slice(-6)}`;\n        await db.run(\"INSERT INTO users (name, phone) VALUES (?, ?)\", [\n            capitalizeName(name),\n            defaultPhone\n        ]);\n        user = await db.get(\"SELECT * FROM users WHERE phone = ?\", [\n            defaultPhone\n        ]);\n    }\n    // Parse and format date\n    const formattedDate = parseDate(date);\n    if (!formattedDate) {\n        return {\n            success: false,\n            error: \"Невалидна дата\"\n        };\n    }\n    // Check if slot is available\n    const existingBooking = await db.get(\"SELECT * FROM bookings WHERE date = ? AND time = ? AND status != ?\", [\n        formattedDate,\n        time,\n        \"cancelled\"\n    ]);\n    if (existingBooking) {\n        return {\n            success: false,\n            error: `Слотът ${time} на ${formattedDate} вече е зает`\n        };\n    }\n    // Get service ID if service name provided\n    let serviceId = null;\n    if (service) {\n        const serviceRecord = await db.get(\"SELECT id FROM services WHERE LOWER(name) = LOWER(?)\", [\n            service\n        ]);\n        serviceId = serviceRecord?.id || null;\n    }\n    await db.run(\"INSERT INTO bookings (name, phone, date, time, service_id, status) VALUES (?, ?, ?, ?, ?, ?)\", [\n        user.name,\n        user.phone,\n        formattedDate,\n        time,\n        serviceId,\n        \"pending\"\n    ]);\n    return {\n        success: true,\n        message: `Резервацията за ${user.name} на ${formattedDate} в ${time} е създадена успешно`\n    };\n}\nasync function handleUpdateBooking(db, command) {\n    const { name, date, time } = command;\n    if (!name || !date) {\n        return {\n            success: false,\n            error: \"Името и датата са задължителни\"\n        };\n    }\n    const formattedDate = parseDate(date);\n    if (!formattedDate) {\n        return {\n            success: false,\n            error: \"Невалидна дата\"\n        };\n    }\n    // Find booking\n    const booking = await db.get(\"SELECT * FROM bookings WHERE LOWER(name) = LOWER(?) AND date = ?\", [\n        name,\n        formattedDate\n    ]);\n    if (!booking) {\n        return {\n            success: false,\n            error: `Резервация за ${name} на ${formattedDate} не е намерена`\n        };\n    }\n    const updateFields = [];\n    const updateValues = [];\n    if (time) {\n        // Check if new time is available\n        const existingBooking = await db.get(\"SELECT * FROM bookings WHERE date = ? AND time = ? AND id != ? AND status != ?\", [\n            formattedDate,\n            time,\n            booking.id,\n            \"cancelled\"\n        ]);\n        if (existingBooking) {\n            return {\n                success: false,\n                error: `Слотът ${time} на ${formattedDate} вече е зает`\n            };\n        }\n        updateFields.push(\"time = ?\");\n        updateValues.push(time);\n    }\n    if (updateFields.length === 0) {\n        return {\n            success: false,\n            error: \"Не са посочени данни за промяна\"\n        };\n    }\n    updateValues.push(booking.id);\n    await db.run(`UPDATE bookings SET ${updateFields.join(\", \")} WHERE id = ?`, updateValues);\n    return {\n        success: true,\n        message: `Резервацията за ${name} е обновена успешно`\n    };\n}\nasync function handleCancelBooking(db, command) {\n    const { name, date } = command;\n    if (!name || !date) {\n        return {\n            success: false,\n            error: \"Името и датата са задължителни\"\n        };\n    }\n    const formattedDate = parseDate(date);\n    if (!formattedDate) {\n        return {\n            success: false,\n            error: \"Невалидна дата\"\n        };\n    }\n    const booking = await db.get(\"SELECT * FROM bookings WHERE LOWER(name) = LOWER(?) AND date = ?\", [\n        name,\n        formattedDate\n    ]);\n    if (!booking) {\n        return {\n            success: false,\n            error: `Резервация за ${name} на ${formattedDate} не е намерена`\n        };\n    }\n    await db.run(\"UPDATE bookings SET status = ? WHERE id = ?\", [\n        \"cancelled\",\n        booking.id\n    ]);\n    return {\n        success: true,\n        message: `Резервацията за ${name} на ${formattedDate} е отменена успешно`\n    };\n}\nasync function handleCheckAvailability(db, command) {\n    const { date } = command;\n    let targetDate = date ? parseDate(date) : new Date().toISOString().split(\"T\")[0];\n    if (!targetDate) {\n        targetDate = new Date().toISOString().split(\"T\")[0];\n    }\n    // Get all bookings for the date\n    const bookings = await db.all(\"SELECT time FROM bookings WHERE date = ? AND status != ?\", [\n        targetDate,\n        \"cancelled\"\n    ]);\n    const bookedTimes = bookings.map((b)=>b.time);\n    // Available time slots (9:00 - 17:00)\n    const allSlots = [];\n    for(let hour = 9; hour <= 17; hour++){\n        allSlots.push(`${hour.toString().padStart(2, \"0\")}:00`);\n    }\n    const availableSlots = allSlots.filter((slot)=>!bookedTimes.includes(slot));\n    return {\n        success: true,\n        message: `Намерени ${availableSlots.length} свободни слотове за ${targetDate}`,\n        result: {\n            availableSlots,\n            targetDate\n        }\n    };\n}\nasync function handleShowBookings(db, command) {\n    const { date } = command;\n    if (!date) {\n        return {\n            success: false,\n            error: \"Датата е задължителна\"\n        };\n    }\n    const formattedDate = parseDate(date);\n    if (!formattedDate) {\n        return {\n            success: false,\n            error: \"Невалидна дата\"\n        };\n    }\n    const bookings = await db.all(\"SELECT * FROM bookings WHERE date = ? ORDER BY time\", [\n        formattedDate\n    ]);\n    return {\n        success: true,\n        message: `Намерени ${bookings.length} резервации за ${formattedDate}`,\n        result: {\n            bookings,\n            date: formattedDate\n        }\n    };\n}\n// Helper functions\nfunction formatPhoneNumber(phone) {\n    // Remove all non-digits\n    const digits = phone.replace(/\\D/g, \"\");\n    // Handle 9-digit numbers (add +359)\n    if (digits.length === 9 && digits.startsWith(\"8\")) {\n        return `+359${digits.slice(1)}`;\n    }\n    // Handle 10-digit numbers (add +359)\n    if (digits.length === 10 && digits.startsWith(\"08\")) {\n        return `+359${digits.slice(1)}`;\n    }\n    // Handle 12-digit numbers (already formatted)\n    if (digits.length === 12 && digits.startsWith(\"359\")) {\n        return `+${digits}`;\n    }\n    // Default: assume it's a valid number\n    return digits.startsWith(\"+\") ? digits : `+359${digits}`;\n}\nfunction capitalizeName(name) {\n    return name.split(\" \").map((word)=>word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(\" \");\n}\nfunction parseDate(dateStr) {\n    // Handle various date formats\n    const today = new Date();\n    if (dateStr.toLowerCase() === \"днес\" || dateStr.toLowerCase() === \"сега\") {\n        return today.toISOString().split(\"T\")[0];\n    }\n    if (dateStr.toLowerCase() === \"утре\") {\n        const tomorrow = new Date(today);\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        return tomorrow.toISOString().split(\"T\")[0];\n    }\n    // Try to parse DD.MM.YYYY format\n    const match = dateStr.match(/(\\d{1,2})[.\\-\\/](\\d{1,2})[.\\-\\/](\\d{4})/);\n    if (match) {\n        const [, day, month, year] = match;\n        return `${year}-${month.padStart(2, \"0\")}-${day.padStart(2, \"0\")}`;\n    }\n    // Try to parse YYYY-MM-DD format\n    if (dateStr.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n        return dateStr;\n    }\n    return null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/admin/voice-commands/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/sqlite"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fvoice-commands%2Froute&page=%2Fapi%2Fadmin%2Fvoice-commands%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fvoice-commands%2Froute.ts&appDir=C%3A%5CUsers%5Cgenius%5CDownloads%5Cdrborislavpetrov%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cgenius%5CDownloads%5Cdrborislavpetrov&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();