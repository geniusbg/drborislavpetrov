// üß™ –¢–µ—Å—Ç –∑–∞ API —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testBookingAPI() {
  console.log('üéØ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ API –∑–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏...');
  
  try {
    // 1. –¢–µ—Å—Ç –∑–∞ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è
    console.log('üìã –°—ä–∑–¥–∞–≤–∞–º —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è...');
    
    const bookingData = {
      name: 'Test Patient',
      email: 'test@example.com',
      phone: `+359888${Date.now()}`,
      service: '1',
      date: '2024-12-31',
      time: '14:00',
      message: 'Test booking'
    };
    
    const response = await fetch('http://localhost:3000/api/admin/bookings', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-admin-token': 'mock-token'
      },
      body: JSON.stringify(bookingData)
    });
    
    console.log('üìã Response status:', response.status);
    console.log('üìã Response headers:', response.headers.raw());
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ –†–µ–∑–µ—Ä–≤–∞—Ü–∏—è—Ç–∞ —Å–µ —Å—ä–∑–¥–∞–¥–µ —É—Å–ø–µ—à–Ω–æ:', result);
    } else {
      const error = await response.text();
      console.log('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ:', error);
    }
    
    // 2. –¢–µ—Å—Ç –∑–∞ –≤–∑–∏–º–∞–Ω–µ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
    console.log('\nüìã –í–∑–∏–º–∞–º —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏...');
    
    const getResponse = await fetch('http://localhost:3000/api/admin/bookings', {
      method: 'GET',
      headers: {
        'x-admin-token': 'mock-token'
      }
    });
    
    console.log('üìã GET Response status:', getResponse.status);
    
    if (getResponse.ok) {
      const bookings = await getResponse.json();
      console.log('‚úÖ –†–µ–∑–µ—Ä–≤–∞—Ü–∏–∏—Ç–µ —Å–µ –∑–∞—Ä–µ–¥–∏—Ö–∞:', bookings.bookings?.length || 0, '—Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏');
    } else {
      const error = await getResponse.text();
      console.log('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∑–∏–º–∞–Ω–µ –Ω–∞ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏:', error);
    }
    
  } catch (error) {
    console.error('üí• –ì—Ä–µ—à–∫–∞:', error.message);
  }
}

testBookingAPI(); 