// üß™ –¢–µ—Å—Ç –∑–∞ API –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ
const puppeteer = require('puppeteer');

async function testUsersAPI() {
  console.log('üéØ –¢–µ—Å—Ç–≤–∞–Ω–µ –Ω–∞ API –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏...');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    slowMo: 100 
  });
  
  const page = await browser.newPage();
  await page.setViewport({ width: 1920, height: 1080 });
  
  // –û–±—Ä–∞–±–æ—Ç–≤–∞–π alert –¥–∏–∞–ª–æ–∑–∏—Ç–µ
  page.on('dialog', dialog => {
    console.log('üìã Alert –¥–∏–∞–ª–æ–≥:', dialog.message());
    dialog.accept();
  });
  
  try {
    // 1. Login
    console.log('üìã Login...');
    await page.goto('http://localhost:3000/admin/login');
    await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    await page.type('input[name="username"]', 'admin');
    await page.type('input[name="password"]', 'admin123');
    await page.click('button[type="submit"]');
    await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    // 2. –û—Ç–∏–¥–∏ –≤ —Å–µ–∫—Ü–∏—è –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
    console.log('üìã –û—Ç–∏–≤–∞–º –≤ —Å–µ–∫—Ü–∏—è –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏...');
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const usersBtn = buttons.find(btn => btn.textContent.trim() === '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏');
      if (usersBtn) usersBtn.click();
    });
    await (page.waitForTimeout ? page.waitForTimeout(2000) : new Promise(resolve => setTimeout(resolve, 2000)));
    
    // 3. –û—Ç–≤–æ—Ä–∏ –º–æ–¥–∞–ª–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ
    console.log('üìã –û—Ç–≤–∞—Ä—è–º –º–æ–¥–∞–ª–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ...');
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const addUserBtn = buttons.find(btn => btn.textContent.trim() === '–î–æ–±–∞–≤–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª');
      if (addUserBtn) addUserBtn.click();
    });
    await (page.waitForTimeout ? page.waitForTimeout(1000) : new Promise(resolve => setTimeout(resolve, 1000)));
    
    // 4. –ü–æ–ø—ä–ª–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–∞
    console.log('üìã –ü–æ–ø—ä–ª–≤–∞–º —Ñ–æ—Ä–º–∞—Ç–∞...');
    await page.type('input[name="name"]', 'Test User API');
    await page.type('input[name="email"]', 'test@api.com');
    const timestamp = Date.now();
    await page.type('input[name="phone"]', `+359888${timestamp}`);
    await page.type('textarea[name="address"]', 'Test Address API');
    await page.type('textarea[name="notes"]', 'Test notes API');
    
    // 5. –í–∫–ª—é—á–∏ network monitoring
    console.log('üìã –í–∫–ª—é—á–≤–∞–º network monitoring...');
    await page.setRequestInterception(true);
    
    let apiCallDetected = false;
    let apiResponse = null;
    
    page.on('request', request => {
      if (request.url().includes('/api/admin/users') && request.method() === 'POST') {
        console.log('üìã API –∑–∞—è–≤–∫–∞ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –¥–µ—Ç–µ–∫—Ç–∏—Ä–∞–Ω–∞:', request.url());
        apiCallDetected = true;
      }
      request.continue();
    });
    
    page.on('response', response => {
      if (response.url().includes('/api/admin/users') && response.request().method() === 'POST') {
        console.log('üìã API –æ—Ç–≥–æ–≤–æ—Ä –ø–æ–ª—É—á–µ–Ω:', response.status());
        apiResponse = response.status();
      }
    });
    
    // 6. –ö–ª–∏–∫–Ω–∏ "–î–æ–±–∞–≤–∏"
    console.log('üìã –ö–ª–∏–∫–∞–º "–î–æ–±–∞–≤–∏"...');
    
    // –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –µ –≤–∞–ª–∏–¥–µ–Ω
    const formValid = await page.evaluate(() => {
      const nameInput = document.querySelector('input[name="name"]');
      const phoneInput = document.querySelector('input[name="phone"]');
      const form = document.querySelector('form');
      
      console.log('Form validation check:', {
        nameValue: nameInput ? nameInput.value : 'no input',
        phoneValue: phoneInput ? phoneInput.value : 'no input',
        formExists: !!form
      });
      
      return nameInput && nameInput.value.trim() !== '' && 
             phoneInput && phoneInput.value.trim() !== '';
    });
    
    if (formValid) {
      console.log('‚úÖ –§–æ—Ä–º–∞—Ç–∞ –µ –≤–∞–ª–∏–¥–µ–Ω');
    } else {
      console.log('‚ùå –§–æ—Ä–º–∞—Ç–∞ –Ω–µ –µ –≤–∞–ª–∏–¥–µ–Ω');
    }
    
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const addBtn = buttons.find(btn => btn.textContent.trim() === '–î–æ–±–∞–≤–∏');
      if (addBtn) addBtn.click();
    });
    
    // 7. –ò–∑—á–∞–∫–∞–π –∑–∞ API –∑–∞—è–≤–∫–∞—Ç–∞
    console.log('üìã –ò–∑—á–∞–∫–≤–∞–º –∑–∞ API –∑–∞—è–≤–∫–∞—Ç–∞...');
    await (page.waitForTimeout ? page.waitForTimeout(8000) : new Promise(resolve => setTimeout(resolve, 8000)));
    
    if (apiCallDetected) {
      console.log('‚úÖ API –∑–∞—è–≤–∫–∞—Ç–∞ –±–µ—à–µ –∏–∑–ø—Ä–∞—Ç–µ–Ω–∞');
      if (apiResponse === 200) {
        console.log('‚úÖ API –∑–∞—è–≤–∫–∞—Ç–∞ –±–µ—à–µ —É—Å–ø–µ—à–Ω–∞ (200)');
      } else {
        console.log(`‚ùå API –∑–∞—è–≤–∫–∞—Ç–∞ –Ω–µ –±–µ—à–µ —É—Å–ø–µ—à–Ω–∞ (${apiResponse})`);
      }
    } else {
      console.log('‚ùå API –∑–∞—è–≤–∫–∞—Ç–∞ –Ω–µ –±–µ—à–µ –¥–µ—Ç–µ–∫—Ç–∏—Ä–∞–Ω–∞');
    }
    
    // 8. –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –º–æ–¥–∞–ª—ä—Ç —Å–µ –∑–∞—Ç–≤–æ—Ä–∏
    const modalClosed = await page.evaluate(() => {
      const modal = document.querySelector('form');
      return !modal;
    });
    
    if (modalClosed) {
      console.log('‚úÖ –ú–æ–¥–∞–ª—ä—Ç —Å–µ –∑–∞—Ç–≤–æ—Ä–∏ —Å–ª–µ–¥ –¥–æ–±–∞–≤—è–Ω–µ');
    } else {
      console.log('‚ùå –ú–æ–¥–∞–ª—ä—Ç –Ω–µ —Å–µ –∑–∞—Ç–≤–æ—Ä–∏ —Å–ª–µ–¥ –¥–æ–±–∞–≤—è–Ω–µ');
    }
    
    // 9. –ü—Ä–æ–≤–µ—Ä–∏ –∑–∞ console errors
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º –∑–∞ console errors...');
    const logs = await page.evaluate(() => {
      return window.consoleErrors || [];
    });
    
    if (logs.length > 0) {
      console.log('‚ö†Ô∏è –ù–∞–º–µ—Ä–µ–Ω–∏ console errors:');
      logs.forEach((log, i) => {
        console.log(`${i + 1}. ${log}`);
      });
    } else {
      console.log('‚úÖ –ù—è–º–∞ console errors');
    }
    
  } catch (error) {
    console.error('üí• –ì—Ä–µ—à–∫–∞:', error.message);
  } finally {
    await page.setRequestInterception(false);
    await browser.close();
  }
}

testUsersAPI(); 